;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit CoreTop : 
  module IMEM : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<32>, flip dataIn : UInt<32>, flip wen : UInt<1>, dataOut : UInt<32>}
    
    cmem async_mem : UInt<32>[256] @[IMEM.scala 31:24]
    when io.wen : @[IMEM.scala 35:5]
      node _T = bits(io.address, 7, 0)
      write mport MPORT = async_mem[_T], clock
      MPORT <= io.dataIn
      skip @[IMEM.scala 35:5]
    node _address_pc_T = mux(UInt<1>("h00"), UInt<2>("h03"), UInt<2>("h00")) @[Bitwise.scala 72:12]
    node _address_pc_T_1 = cat(_address_pc_T, io.address) @[IMEM.scala 39:35]
    node address_pc = shr(_address_pc_T_1, 2) @[IMEM.scala 39:49]
    node _io_dataOut_T = bits(address_pc, 7, 0) @[IMEM.scala 43:33]
    read mport io_dataOut_MPORT = async_mem[_io_dataOut_T], clock @[IMEM.scala 43:33]
    io.dataOut <= io_dataOut_MPORT @[IMEM.scala 43:16]
    
  module PC : 
    input clock : Clock
    input reset : Reset
    output io : {flip en_jump : UInt<1>, flip br_imm : SInt<32>, flip jalr_en_pc : UInt<1>, out : SInt<10>}
    
    reg counter : SInt<10>, clock with : (reset => (reset, asSInt(UInt<10>("h00")))) @[PC.scala 14:27]
    node _count_buffer_T = eq(counter, asSInt(UInt<12>("h0400"))) @[PC.scala 17:96]
    node _count_buffer_T_1 = add(counter, asSInt(UInt<4>("h04"))) @[PC.scala 18:46]
    node _count_buffer_T_2 = tail(_count_buffer_T_1, 1) @[PC.scala 18:46]
    node _count_buffer_T_3 = asSInt(_count_buffer_T_2) @[PC.scala 18:46]
    node _count_buffer_T_4 = mux(_count_buffer_T, asSInt(UInt<1>("h00")), _count_buffer_T_3) @[PC.scala 17:86]
    node _count_buffer_T_5 = mux(io.en_jump, io.br_imm, _count_buffer_T_4) @[PC.scala 17:57]
    node count_buffer = mux(io.jalr_en_pc, io.br_imm, _count_buffer_T_5) @[PC.scala 17:27]
    counter <= count_buffer @[PC.scala 20:13]
    io.out <= counter @[PC.scala 22:12]
    
  module Fetch : 
    input clock : Clock
    input reset : Reset
    output io : {flip fetch_pc_br_imm : SInt<32>, flip fetch_pc_en_jump : UInt<1>, flip fetch_jalr_en_pc : UInt<1>, flip fetch_wen : UInt<1>, fetch_dataOut : UInt<32>, fetch_pc_out : SInt<10>}
    
    inst imem_module_Fetch of IMEM @[Fetch.scala 42:39]
    imem_module_Fetch.clock <= clock
    imem_module_Fetch.reset <= reset
    inst pc_module_Fetch of PC @[Fetch.scala 43:39]
    pc_module_Fetch.clock <= clock
    pc_module_Fetch.reset <= reset
    pc_module_Fetch.io.br_imm <= asSInt(UInt<1>("h00")) @[Fetch.scala 51:31]
    pc_module_Fetch.io.br_imm <= io.fetch_pc_br_imm @[Fetch.scala 53:37]
    pc_module_Fetch.io.en_jump <= io.fetch_pc_en_jump @[Fetch.scala 54:37]
    pc_module_Fetch.io.jalr_en_pc <= io.fetch_jalr_en_pc @[Fetch.scala 55:37]
    node _imem_module_Fetch_io_address_T = asUInt(pc_module_Fetch.io.out) @[Fetch.scala 57:65]
    imem_module_Fetch.io.address <= _imem_module_Fetch_io_address_T @[Fetch.scala 57:37]
    imem_module_Fetch.io.dataIn <= UInt<1>("h00") @[Fetch.scala 58:37]
    imem_module_Fetch.io.wen <= io.fetch_wen @[Fetch.scala 59:37]
    io.fetch_dataOut <= imem_module_Fetch.io.dataOut @[Fetch.scala 60:37]
    io.fetch_pc_out <= pc_module_Fetch.io.out @[Fetch.scala 61:43]
    
  module CU : 
    input clock : Clock
    input reset : Reset
    output io : {flip ins : UInt<32>, flip dmem_addr2 : UInt<2>, w_en : UInt<1>, imem_en : UInt<1>, rs1 : UInt<5>, rs2 : UInt<5>, rd : UInt<5>, r_en : UInt<1>, dmem_en : UInt<1>, immediate : UInt<32>, func3_7 : UInt<4>, br_en : UInt<1>, unbr_en : UInt<1>, mask_val : UInt<1>[4], jalr_en : UInt<1>}
    
    io.imem_en <= UInt<1>("h00") @[CU.scala 48:16]
    io.w_en <= UInt<1>("h00") @[CU.scala 50:13]
    io.br_en <= UInt<1>("h00") @[CU.scala 52:14]
    io.unbr_en <= UInt<1>("h00") @[CU.scala 54:16]
    io.jalr_en <= UInt<1>("h00") @[CU.scala 56:16]
    io.mask_val[0] <= UInt<1>("h00") @[CU.scala 58:20]
    io.mask_val[1] <= UInt<1>("h00") @[CU.scala 59:20]
    io.mask_val[2] <= UInt<1>("h00") @[CU.scala 60:20]
    io.mask_val[3] <= UInt<1>("h00") @[CU.scala 61:20]
    node _io_rs1_T = bits(io.ins, 19, 15) @[CU.scala 64:21]
    io.rs1 <= _io_rs1_T @[CU.scala 64:12]
    node _io_rs2_T = bits(io.ins, 24, 20) @[CU.scala 65:21]
    io.rs2 <= _io_rs2_T @[CU.scala 65:12]
    node _io_rd_T = bits(io.ins, 11, 7) @[CU.scala 66:20]
    io.rd <= _io_rd_T @[CU.scala 66:11]
    io.immediate <= UInt<1>("h00") @[CU.scala 67:18]
    node _io_func3_7_T = bits(io.ins, 14, 12) @[CU.scala 71:26]
    io.func3_7 <= _io_func3_7_T @[CU.scala 71:16]
    io.dmem_en <= UInt<1>("h00") @[CU.scala 82:16]
    io.r_en <= UInt<1>("h00") @[CU.scala 83:13]
    node _T = bits(io.ins, 6, 0) @[CU.scala 84:16]
    node _T_1 = eq(_T, UInt<6>("h033")) @[CU.scala 84:22]
    when _T_1 : @[CU.scala 85:5]
      io.w_en <= UInt<1>("h01") @[CU.scala 86:17]
      node io_func3_7_hi = bits(io.ins, 30, 30) @[CU.scala 87:34]
      node io_func3_7_lo = bits(io.ins, 14, 12) @[CU.scala 87:46]
      node _io_func3_7_T_1 = cat(io_func3_7_hi, io_func3_7_lo) @[Cat.scala 30:58]
      io.func3_7 <= _io_func3_7_T_1 @[CU.scala 87:20]
      skip @[CU.scala 85:5]
    else : @[CU.scala 89:5]
      node _T_2 = bits(io.ins, 6, 0) @[CU.scala 88:22]
      node _T_3 = eq(_T_2, UInt<5>("h013")) @[CU.scala 88:28]
      when _T_3 : @[CU.scala 89:5]
        io.w_en <= UInt<1>("h01") @[CU.scala 90:17]
        node _io_immediate_T = bits(io.ins, 31, 31) @[CU.scala 91:46]
        node _io_immediate_T_1 = bits(_io_immediate_T, 0, 0) @[Bitwise.scala 72:15]
        node io_immediate_hi = mux(_io_immediate_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
        node io_immediate_lo = bits(io.ins, 31, 20) @[CU.scala 91:60]
        node _io_immediate_T_2 = cat(io_immediate_hi, io_immediate_lo) @[Cat.scala 30:58]
        io.immediate <= _io_immediate_T_2 @[CU.scala 91:22]
        node _T_4 = bits(io.ins, 14, 12) @[CU.scala 93:20]
        node _T_5 = eq(_T_4, UInt<1>("h01")) @[CU.scala 93:28]
        node _T_6 = bits(io.ins, 14, 12) @[CU.scala 94:18]
        node _T_7 = eq(_T_6, UInt<3>("h05")) @[CU.scala 94:26]
        node _T_8 = or(_T_5, _T_7) @[CU.scala 94:9]
        node _T_9 = bits(io.ins, 14, 12) @[CU.scala 94:49]
        node _T_10 = eq(_T_9, UInt<4>("h0d")) @[CU.scala 94:57]
        node _T_11 = or(_T_8, _T_10) @[CU.scala 94:40]
        when _T_11 : @[CU.scala 95:9]
          node io_func3_7_hi_1 = bits(io.ins, 30, 30) @[CU.scala 96:38]
          node io_func3_7_lo_1 = bits(io.ins, 14, 12) @[CU.scala 96:50]
          node _io_func3_7_T_2 = cat(io_func3_7_hi_1, io_func3_7_lo_1) @[Cat.scala 30:58]
          io.func3_7 <= _io_func3_7_T_2 @[CU.scala 96:24]
          skip @[CU.scala 95:9]
        skip @[CU.scala 89:5]
      else : @[CU.scala 99:5]
        node _T_12 = bits(io.ins, 6, 0) @[CU.scala 98:22]
        node _T_13 = eq(_T_12, UInt<2>("h03")) @[CU.scala 98:28]
        when _T_13 : @[CU.scala 99:5]
          node _io_immediate_T_3 = bits(io.ins, 31, 31) @[CU.scala 100:46]
          node _io_immediate_T_4 = bits(_io_immediate_T_3, 0, 0) @[Bitwise.scala 72:15]
          node io_immediate_hi_1 = mux(_io_immediate_T_4, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
          node io_immediate_lo_1 = bits(io.ins, 31, 20) @[CU.scala 100:60]
          node _io_immediate_T_5 = cat(io_immediate_hi_1, io_immediate_lo_1) @[Cat.scala 30:58]
          io.immediate <= _io_immediate_T_5 @[CU.scala 100:22]
          io.w_en <= UInt<1>("h01") @[CU.scala 101:17]
          io.r_en <= UInt<1>("h01") @[CU.scala 103:17]
          skip @[CU.scala 99:5]
        else : @[CU.scala 105:5]
          node _T_14 = bits(io.ins, 6, 0) @[CU.scala 104:22]
          node _T_15 = eq(_T_14, UInt<6>("h023")) @[CU.scala 104:28]
          when _T_15 : @[CU.scala 105:5]
            node imm_temp_hi = bits(io.ins, 31, 25) @[CU.scala 106:35]
            node imm_temp_lo = bits(io.ins, 11, 7) @[CU.scala 106:50]
            node io_immediate_lo_2 = cat(imm_temp_hi, imm_temp_lo) @[Cat.scala 30:58]
            node _io_immediate_T_6 = bits(io_immediate_lo_2, 11, 11) @[CU.scala 107:46]
            node _io_immediate_T_7 = bits(_io_immediate_T_6, 0, 0) @[Bitwise.scala 72:15]
            node io_immediate_hi_2 = mux(_io_immediate_T_7, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
            node _io_immediate_T_8 = cat(io_immediate_hi_2, io_immediate_lo_2) @[Cat.scala 30:58]
            io.immediate <= _io_immediate_T_8 @[CU.scala 107:22]
            io.w_en <= UInt<1>("h00") @[CU.scala 108:17]
            io.r_en <= UInt<1>("h01") @[CU.scala 110:17]
            io.dmem_en <= UInt<1>("h01") @[CU.scala 112:20]
            node _T_16 = bits(io.ins, 14, 12) @[CU.scala 114:20]
            node _T_17 = eq(_T_16, UInt<1>("h00")) @[CU.scala 114:28]
            when _T_17 : @[CU.scala 115:9]
              node _T_18 = eq(io.dmem_addr2, UInt<1>("h00")) @[CU.scala 116:32]
              when _T_18 : @[CU.scala 117:13]
                io.mask_val[0] <= UInt<1>("h01") @[CU.scala 118:32]
                io.mask_val[1] <= UInt<1>("h00") @[CU.scala 119:32]
                io.mask_val[2] <= UInt<1>("h00") @[CU.scala 120:32]
                io.mask_val[3] <= UInt<1>("h00") @[CU.scala 121:32]
                skip @[CU.scala 117:13]
              else : @[CU.scala 123:13]
                node _T_19 = eq(io.dmem_addr2, UInt<1>("h01")) @[CU.scala 122:38]
                when _T_19 : @[CU.scala 123:13]
                  io.mask_val[0] <= UInt<1>("h00") @[CU.scala 124:32]
                  io.mask_val[1] <= UInt<1>("h01") @[CU.scala 125:32]
                  io.mask_val[2] <= UInt<1>("h00") @[CU.scala 126:32]
                  io.mask_val[3] <= UInt<1>("h00") @[CU.scala 127:32]
                  skip @[CU.scala 123:13]
                else : @[CU.scala 129:13]
                  node _T_20 = eq(io.dmem_addr2, UInt<2>("h02")) @[CU.scala 128:38]
                  when _T_20 : @[CU.scala 129:13]
                    io.mask_val[0] <= UInt<1>("h00") @[CU.scala 130:32]
                    io.mask_val[1] <= UInt<1>("h00") @[CU.scala 131:32]
                    io.mask_val[2] <= UInt<1>("h01") @[CU.scala 132:32]
                    io.mask_val[3] <= UInt<1>("h00") @[CU.scala 133:32]
                    skip @[CU.scala 129:13]
                  else : @[CU.scala 135:13]
                    node _T_21 = eq(io.dmem_addr2, UInt<2>("h03")) @[CU.scala 134:38]
                    when _T_21 : @[CU.scala 135:13]
                      io.mask_val[0] <= UInt<1>("h00") @[CU.scala 136:32]
                      io.mask_val[1] <= UInt<1>("h00") @[CU.scala 137:32]
                      io.mask_val[2] <= UInt<1>("h00") @[CU.scala 138:32]
                      io.mask_val[3] <= UInt<1>("h01") @[CU.scala 139:32]
                      skip @[CU.scala 135:13]
              skip @[CU.scala 115:9]
            else : @[CU.scala 143:9]
              node _T_22 = bits(io.ins, 14, 12) @[CU.scala 142:26]
              node _T_23 = eq(_T_22, UInt<1>("h01")) @[CU.scala 142:34]
              when _T_23 : @[CU.scala 143:9]
                node _T_24 = eq(io.dmem_addr2, UInt<1>("h00")) @[CU.scala 144:32]
                when _T_24 : @[CU.scala 145:13]
                  io.mask_val[0] <= UInt<1>("h01") @[CU.scala 146:32]
                  io.mask_val[1] <= UInt<1>("h01") @[CU.scala 147:32]
                  io.mask_val[2] <= UInt<1>("h00") @[CU.scala 148:32]
                  io.mask_val[3] <= UInt<1>("h00") @[CU.scala 149:32]
                  skip @[CU.scala 145:13]
                else : @[CU.scala 151:13]
                  node _T_25 = eq(io.dmem_addr2, UInt<1>("h01")) @[CU.scala 150:38]
                  when _T_25 : @[CU.scala 151:13]
                    io.mask_val[0] <= UInt<1>("h00") @[CU.scala 152:32]
                    io.mask_val[1] <= UInt<1>("h01") @[CU.scala 153:32]
                    io.mask_val[2] <= UInt<1>("h01") @[CU.scala 154:32]
                    io.mask_val[3] <= UInt<1>("h00") @[CU.scala 155:32]
                    skip @[CU.scala 151:13]
                  else : @[CU.scala 157:13]
                    node _T_26 = eq(io.dmem_addr2, UInt<2>("h02")) @[CU.scala 156:38]
                    when _T_26 : @[CU.scala 157:13]
                      io.mask_val[0] <= UInt<1>("h00") @[CU.scala 158:32]
                      io.mask_val[1] <= UInt<1>("h00") @[CU.scala 159:32]
                      io.mask_val[2] <= UInt<1>("h01") @[CU.scala 160:32]
                      io.mask_val[3] <= UInt<1>("h01") @[CU.scala 161:32]
                      skip @[CU.scala 157:13]
                    else : @[CU.scala 163:13]
                      node _T_27 = eq(io.dmem_addr2, UInt<2>("h03")) @[CU.scala 162:38]
                      when _T_27 : @[CU.scala 163:13]
                        io.mask_val[0] <= UInt<1>("h01") @[CU.scala 164:32]
                        io.mask_val[1] <= UInt<1>("h00") @[CU.scala 165:32]
                        io.mask_val[2] <= UInt<1>("h00") @[CU.scala 166:32]
                        io.mask_val[3] <= UInt<1>("h01") @[CU.scala 167:32]
                        skip @[CU.scala 163:13]
                skip @[CU.scala 143:9]
              else : @[CU.scala 171:9]
                node _T_28 = bits(io.ins, 14, 12) @[CU.scala 170:26]
                node _T_29 = eq(_T_28, UInt<2>("h02")) @[CU.scala 170:34]
                when _T_29 : @[CU.scala 171:9]
                  node _T_30 = eq(io.dmem_addr2, UInt<1>("h00")) @[CU.scala 172:32]
                  when _T_30 : @[CU.scala 173:13]
                    io.mask_val[0] <= UInt<1>("h01") @[CU.scala 174:32]
                    io.mask_val[1] <= UInt<1>("h01") @[CU.scala 175:32]
                    io.mask_val[2] <= UInt<1>("h01") @[CU.scala 176:32]
                    io.mask_val[3] <= UInt<1>("h01") @[CU.scala 177:32]
                    skip @[CU.scala 173:13]
                  else : @[CU.scala 178:24]
                    io.mask_val[0] <= UInt<1>("h01") @[CU.scala 179:32]
                    io.mask_val[1] <= UInt<1>("h01") @[CU.scala 180:32]
                    io.mask_val[2] <= UInt<1>("h01") @[CU.scala 181:32]
                    io.mask_val[3] <= UInt<1>("h01") @[CU.scala 182:32]
                    skip @[CU.scala 178:24]
                  skip @[CU.scala 171:9]
            skip @[CU.scala 105:5]
          else : @[CU.scala 189:5]
            node _T_31 = bits(io.ins, 6, 0) @[CU.scala 188:22]
            node _T_32 = eq(_T_31, UInt<6>("h037")) @[CU.scala 188:28]
            when _T_32 : @[CU.scala 189:5]
              node io_immediate_hi_3 = bits(io.ins, 31, 12) @[CU.scala 190:36]
              node io_immediate_lo_3 = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
              node _io_immediate_T_9 = cat(io_immediate_hi_3, io_immediate_lo_3) @[Cat.scala 30:58]
              io.immediate <= _io_immediate_T_9 @[CU.scala 190:22]
              io.w_en <= UInt<1>("h01") @[CU.scala 191:17]
              io.func3_7 <= UInt<1>("h00") @[CU.scala 192:20]
              skip @[CU.scala 189:5]
            else : @[CU.scala 194:5]
              node _T_33 = bits(io.ins, 6, 0) @[CU.scala 193:22]
              node _T_34 = eq(_T_33, UInt<5>("h017")) @[CU.scala 193:28]
              when _T_34 : @[CU.scala 194:5]
                node _io_immediate_T_10 = bits(io.ins, 31, 12) @[CU.scala 195:33]
                node _io_immediate_T_11 = shl(_io_immediate_T_10, 12) @[CU.scala 195:43]
                io.immediate <= _io_immediate_T_11 @[CU.scala 195:22]
                io.w_en <= UInt<1>("h01") @[CU.scala 196:17]
                io.func3_7 <= UInt<1>("h00") @[CU.scala 197:20]
                skip @[CU.scala 194:5]
              else : @[CU.scala 199:5]
                node _T_35 = bits(io.ins, 6, 0) @[CU.scala 198:22]
                node _T_36 = eq(_T_35, UInt<7>("h063")) @[CU.scala 198:28]
                when _T_36 : @[CU.scala 199:5]
                  node temp_hi_hi_hi = bits(io.ins, 31, 31) @[CU.scala 201:30]
                  node temp_hi_hi_lo = bits(io.ins, 7, 7) @[CU.scala 201:42]
                  node temp_hi_lo = bits(io.ins, 30, 25) @[CU.scala 201:53]
                  node temp_lo_hi = bits(io.ins, 11, 8) @[CU.scala 201:67]
                  node temp_lo = cat(temp_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
                  node temp_hi_hi = cat(temp_hi_hi_hi, temp_hi_hi_lo) @[Cat.scala 30:58]
                  node temp_hi = cat(temp_hi_hi, temp_hi_lo) @[Cat.scala 30:58]
                  node io_immediate_lo_4 = cat(temp_hi, temp_lo) @[Cat.scala 30:58]
                  node _io_immediate_T_12 = bits(io_immediate_lo_4, 12, 12) @[CU.scala 202:43]
                  node _io_immediate_T_13 = bits(_io_immediate_T_12, 0, 0) @[Bitwise.scala 72:15]
                  node io_immediate_hi_4 = mux(_io_immediate_T_13, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
                  node _io_immediate_T_14 = cat(io_immediate_hi_4, io_immediate_lo_4) @[Cat.scala 30:58]
                  io.immediate <= _io_immediate_T_14 @[CU.scala 202:22]
                  io.w_en <= UInt<1>("h00") @[CU.scala 203:17]
                  node _io_func3_7_T_3 = bits(io.ins, 14, 12) @[CU.scala 204:29]
                  io.func3_7 <= _io_func3_7_T_3 @[CU.scala 204:20]
                  io.br_en <= UInt<1>("h01") @[CU.scala 205:18]
                  skip @[CU.scala 199:5]
                else : @[CU.scala 207:5]
                  node _T_37 = bits(io.ins, 6, 0) @[CU.scala 206:22]
                  node _T_38 = eq(_T_37, UInt<7>("h06f")) @[CU.scala 206:28]
                  when _T_38 : @[CU.scala 207:5]
                    node temp_hi_hi_hi_1 = bits(io.ins, 31, 31) @[CU.scala 209:31]
                    node temp_hi_hi_lo_1 = bits(io.ins, 19, 12) @[CU.scala 209:42]
                    node temp_hi_lo_1 = bits(io.ins, 20, 20) @[CU.scala 209:56]
                    node temp_lo_hi_1 = bits(io.ins, 30, 21) @[CU.scala 209:67]
                    node temp_lo_1 = cat(temp_lo_hi_1, UInt<1>("h00")) @[Cat.scala 30:58]
                    node temp_hi_hi_1 = cat(temp_hi_hi_hi_1, temp_hi_hi_lo_1) @[Cat.scala 30:58]
                    node temp_hi_1 = cat(temp_hi_hi_1, temp_hi_lo_1) @[Cat.scala 30:58]
                    node io_immediate_lo_5 = cat(temp_hi_1, temp_lo_1) @[Cat.scala 30:58]
                    node _io_immediate_T_15 = bits(io_immediate_lo_5, 20, 20) @[CU.scala 210:43]
                    node _io_immediate_T_16 = bits(_io_immediate_T_15, 0, 0) @[Bitwise.scala 72:15]
                    node io_immediate_hi_5 = mux(_io_immediate_T_16, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
                    node _io_immediate_T_17 = cat(io_immediate_hi_5, io_immediate_lo_5) @[Cat.scala 30:58]
                    io.immediate <= _io_immediate_T_17 @[CU.scala 210:22]
                    io.w_en <= UInt<1>("h01") @[CU.scala 211:17]
                    io.func3_7 <= UInt<1>("h00") @[CU.scala 212:21]
                    io.unbr_en <= UInt<1>("h01") @[CU.scala 213:21]
                    skip @[CU.scala 207:5]
                  else : @[CU.scala 215:5]
                    node _T_39 = bits(io.ins, 6, 0) @[CU.scala 214:22]
                    node _T_40 = eq(_T_39, UInt<7>("h067")) @[CU.scala 214:28]
                    when _T_40 : @[CU.scala 215:5]
                      node _io_immediate_T_18 = bits(io.ins, 31, 31) @[CU.scala 216:46]
                      node _io_immediate_T_19 = bits(_io_immediate_T_18, 0, 0) @[Bitwise.scala 72:15]
                      node io_immediate_hi_6 = mux(_io_immediate_T_19, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
                      node io_immediate_lo_6 = bits(io.ins, 31, 20) @[CU.scala 216:60]
                      node _io_immediate_T_20 = cat(io_immediate_hi_6, io_immediate_lo_6) @[Cat.scala 30:58]
                      io.immediate <= _io_immediate_T_20 @[CU.scala 216:22]
                      io.w_en <= UInt<1>("h01") @[CU.scala 217:17]
                      io.func3_7 <= UInt<1>("h00") @[CU.scala 218:20]
                      io.jalr_en <= UInt<1>("h01") @[CU.scala 219:20]
                      skip @[CU.scala 215:5]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip raddr1 : UInt<5>, flip raddr2 : UInt<5>, rdata1 : UInt<32>, rdata2 : UInt<32>, flip wen : UInt<1>, flip waddr : UInt<5>, flip wdata : UInt<32>}
    
    reg regs : UInt<32>[32], clock @[RegisterFile.scala 30:20]
    node _io_rdata1_T = orr(io.raddr1) @[RegisterFile.scala 31:35]
    node _io_rdata1_T_1 = mux(_io_rdata1_T, regs[io.raddr1], UInt<1>("h00")) @[RegisterFile.scala 31:22]
    io.rdata1 <= _io_rdata1_T_1 @[RegisterFile.scala 31:15]
    node _io_rdata2_T = orr(io.raddr2) @[RegisterFile.scala 33:35]
    node _io_rdata2_T_1 = mux(_io_rdata2_T, regs[io.raddr2], UInt<1>("h00")) @[RegisterFile.scala 33:22]
    io.rdata2 <= _io_rdata2_T_1 @[RegisterFile.scala 33:15]
    node _T = orr(io.waddr) @[RegisterFile.scala 35:30]
    node _T_1 = and(io.wen, _T) @[RegisterFile.scala 35:19]
    when _T_1 : @[RegisterFile.scala 35:36]
      regs[io.waddr] <= io.wdata @[RegisterFile.scala 36:27]
      node _io_rdata1_T_2 = orr(io.raddr1) @[RegisterFile.scala 37:39]
      node _io_rdata1_T_3 = mux(_io_rdata1_T_2, regs[io.raddr1], UInt<1>("h00")) @[RegisterFile.scala 37:26]
      io.rdata1 <= _io_rdata1_T_3 @[RegisterFile.scala 37:19]
      node _io_rdata2_T_2 = orr(io.raddr2) @[RegisterFile.scala 39:39]
      node _io_rdata2_T_3 = mux(_io_rdata2_T_2, regs[io.raddr2], UInt<1>("h00")) @[RegisterFile.scala 39:26]
      io.rdata2 <= _io_rdata2_T_3 @[RegisterFile.scala 39:19]
      skip @[RegisterFile.scala 35:36]
    
  module Branch : 
    input clock : Clock
    input reset : Reset
    output io : {flip func3 : UInt<3>, flip br_ins : UInt<1>, flip inpA : UInt<32>, flip inpB : UInt<32>, br_taken : UInt<1>}
    
    io.br_taken <= UInt<1>("h00") @[Branch.scala 30:17]
    when io.br_ins : @[Branch.scala 32:5]
      node _T = eq(UInt<1>("h00"), io.func3) @[Conditional.scala 37:30]
      when _T : @[Conditional.scala 40:58]
        node _T_1 = eq(io.inpA, io.inpB) @[Branch.scala 37:30]
        when _T_1 : @[Branch.scala 38:17]
          io.br_taken <= UInt<1>("h01") @[Branch.scala 39:33]
          skip @[Branch.scala 38:17]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<1>("h01"), io.func3) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          node _T_3 = neq(io.inpA, io.inpB) @[Branch.scala 44:30]
          when _T_3 : @[Branch.scala 45:17]
            io.br_taken <= UInt<1>("h01") @[Branch.scala 46:33]
            skip @[Branch.scala 45:17]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_4 = eq(UInt<3>("h04"), io.func3) @[Conditional.scala 37:30]
          when _T_4 : @[Conditional.scala 39:67]
            node _T_5 = leq(io.inpA, io.inpB) @[Branch.scala 51:30]
            when _T_5 : @[Branch.scala 52:17]
              io.br_taken <= UInt<1>("h01") @[Branch.scala 53:33]
              skip @[Branch.scala 52:17]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_6 = eq(UInt<3>("h05"), io.func3) @[Conditional.scala 37:30]
            when _T_6 : @[Conditional.scala 39:67]
              node _T_7 = geq(io.inpA, io.inpB) @[Branch.scala 58:30]
              when _T_7 : @[Branch.scala 59:17]
                io.br_taken <= UInt<1>("h01") @[Branch.scala 60:33]
                skip @[Branch.scala 59:17]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_8 = eq(UInt<3>("h06"), io.func3) @[Conditional.scala 37:30]
              when _T_8 : @[Conditional.scala 39:67]
                node _T_9 = leq(io.inpA, io.inpB) @[Branch.scala 65:40]
                when _T_9 : @[Branch.scala 66:17]
                  io.br_taken <= UInt<1>("h01") @[Branch.scala 67:33]
                  skip @[Branch.scala 66:17]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_10 = eq(UInt<3>("h07"), io.func3) @[Conditional.scala 37:30]
                when _T_10 : @[Conditional.scala 39:67]
                  node _T_11 = geq(io.inpA, io.inpB) @[Branch.scala 72:40]
                  when _T_11 : @[Branch.scala 73:17]
                    io.br_taken <= UInt<1>("h01") @[Branch.scala 74:33]
                    skip @[Branch.scala 73:17]
                  skip @[Conditional.scala 39:67]
      skip @[Branch.scala 32:5]
    
  module Decode : 
    input clock : Clock
    input reset : Reset
    output io : {flip decode_ins : UInt<32>, flip decode_dmem_addr2 : UInt<2>, flip decode_regfile_wdata : UInt<32>, flip decode_pc_out : SInt<32>, flip decode_alu_out : UInt<32>, decode_w_en : UInt<1>, decode_imem_en : UInt<1>, decode_pc_en_jump : UInt<1>, decode_pc_en_jalr : UInt<1>, decode_pc_br_imm : SInt<32>, decode_r_en : UInt<1>, decode_dmem_en : UInt<1>, decode_immediate : UInt<32>, decode_func3_7 : UInt<4>, decode_br_en : UInt<1>, decode_unbr_en : UInt<1>, decode_mask_val : UInt<1>[4], decode_jalr_en : UInt<1>, decode_rdata1 : UInt<32>, decode_rdata2 : UInt<32>, decode_alu_in_A : UInt<32>, decode_alu_in_B : UInt<32>, decode_alu_Op : UInt<4>}
    
    inst cu_module of CU @[Decode.scala 58:33]
    cu_module.clock <= clock
    cu_module.reset <= reset
    inst register_module of RegisterFile @[Decode.scala 59:33]
    register_module.clock <= clock
    register_module.reset <= reset
    inst branch_module of Branch @[Decode.scala 60:33]
    branch_module.clock <= clock
    branch_module.reset <= reset
    cu_module.io.ins <= io.decode_ins @[Decode.scala 63:29]
    cu_module.io.dmem_addr2 <= io.decode_dmem_addr2 @[Decode.scala 64:29]
    io.decode_w_en <= cu_module.io.w_en @[Decode.scala 67:37]
    io.decode_imem_en <= cu_module.io.imem_en @[Decode.scala 68:37]
    io.decode_pc_en_jump <= UInt<1>("h00") @[Decode.scala 69:37]
    io.decode_pc_en_jalr <= UInt<1>("h00") @[Decode.scala 70:37]
    io.decode_pc_br_imm <= asSInt(UInt<1>("h00")) @[Decode.scala 71:37]
    io.decode_r_en <= cu_module.io.r_en @[Decode.scala 72:37]
    io.decode_dmem_en <= cu_module.io.dmem_en @[Decode.scala 73:37]
    io.decode_immediate <= cu_module.io.immediate @[Decode.scala 74:37]
    io.decode_func3_7 <= cu_module.io.func3_7 @[Decode.scala 75:37]
    io.decode_br_en <= cu_module.io.br_en @[Decode.scala 76:37]
    io.decode_unbr_en <= cu_module.io.unbr_en @[Decode.scala 77:37]
    io.decode_mask_val[0] <= cu_module.io.mask_val[0] @[Decode.scala 78:37]
    io.decode_mask_val[1] <= cu_module.io.mask_val[1] @[Decode.scala 78:37]
    io.decode_mask_val[2] <= cu_module.io.mask_val[2] @[Decode.scala 78:37]
    io.decode_mask_val[3] <= cu_module.io.mask_val[3] @[Decode.scala 78:37]
    io.decode_jalr_en <= cu_module.io.jalr_en @[Decode.scala 79:37]
    register_module.io.raddr1 <= cu_module.io.rs1 @[Decode.scala 81:31]
    register_module.io.raddr2 <= cu_module.io.rs2 @[Decode.scala 82:31]
    register_module.io.waddr <= cu_module.io.rd @[Decode.scala 83:31]
    io.decode_alu_Op <= cu_module.io.func3_7 @[Decode.scala 85:24]
    io.decode_rdata1 <= register_module.io.rdata1 @[Decode.scala 88:22]
    io.decode_rdata2 <= register_module.io.rdata2 @[Decode.scala 89:22]
    register_module.io.wen <= cu_module.io.w_en @[Decode.scala 91:30]
    io.decode_alu_in_A <= UInt<1>("h00") @[Decode.scala 93:25]
    io.decode_alu_in_B <= UInt<1>("h00") @[Decode.scala 94:25]
    io.decode_alu_Op <= UInt<1>("h00") @[Decode.scala 95:25]
    node _T = bits(cu_module.io.ins, 6, 0) @[Decode.scala 98:26]
    node _T_1 = eq(_T, UInt<6>("h033")) @[Decode.scala 98:32]
    when _T_1 : @[Decode.scala 99:5]
      io.decode_rdata1 <= register_module.io.rdata1 @[Decode.scala 100:26]
      io.decode_rdata2 <= register_module.io.rdata2 @[Decode.scala 101:26]
      node _T_2 = geq(register_module.io.rdata1, UInt<13>("h01000")) @[Decode.scala 103:40]
      node _T_3 = bits(register_module.io.rdata2, 10, 10) @[Decode.scala 103:78]
      node _T_4 = eq(_T_3, UInt<1>("h01")) @[Decode.scala 103:83]
      node _T_5 = and(_T_2, _T_4) @[Decode.scala 103:50]
      when _T_5 : @[Decode.scala 104:9]
        io.decode_rdata1 <= register_module.io.rdata1 @[Decode.scala 105:30]
        io.decode_rdata2 <= register_module.io.rdata2 @[Decode.scala 106:30]
        skip @[Decode.scala 104:9]
      else : @[Decode.scala 108:9]
        node _T_6 = bits(register_module.io.rdata1, 11, 11) @[Decode.scala 107:45]
        node _T_7 = eq(_T_6, UInt<1>("h01")) @[Decode.scala 107:50]
        node _T_8 = geq(register_module.io.rdata2, UInt<13>("h01000")) @[Decode.scala 107:87]
        node _T_9 = and(_T_7, _T_8) @[Decode.scala 107:58]
        when _T_9 : @[Decode.scala 108:9]
          io.decode_rdata1 <= register_module.io.rdata1 @[Decode.scala 109:30]
          node _io_decode_rdata2_T = add(register_module.io.rdata2, UInt<1>("h01")) @[Decode.scala 110:59]
          node _io_decode_rdata2_T_1 = tail(_io_decode_rdata2_T, 1) @[Decode.scala 110:59]
          io.decode_rdata2 <= _io_decode_rdata2_T_1 @[Decode.scala 110:30]
          skip @[Decode.scala 108:9]
      skip @[Decode.scala 99:5]
    else : @[Decode.scala 114:5]
      node _T_10 = bits(cu_module.io.ins, 6, 0) @[Decode.scala 113:32]
      node _T_11 = eq(_T_10, UInt<5>("h013")) @[Decode.scala 113:39]
      when _T_11 : @[Decode.scala 114:5]
        io.decode_rdata1 <= register_module.io.rdata1 @[Decode.scala 115:26]
        io.decode_rdata2 <= cu_module.io.immediate @[Decode.scala 116:26]
        skip @[Decode.scala 114:5]
    register_module.io.wdata <= io.decode_regfile_wdata @[Decode.scala 120:30]
    branch_module.io.func3 <= cu_module.io.func3_7 @[Decode.scala 123:33]
    branch_module.io.br_ins <= cu_module.io.br_en @[Decode.scala 124:33]
    branch_module.io.inpA <= register_module.io.rdata1 @[Decode.scala 125:33]
    branch_module.io.inpB <= register_module.io.rdata2 @[Decode.scala 126:33]
    io.decode_pc_en_jump <= cu_module.io.unbr_en @[Decode.scala 129:33]
    node _T_12 = bits(cu_module.io.ins, 6, 0) @[Decode.scala 132:26]
    node _T_13 = eq(_T_12, UInt<7>("h063")) @[Decode.scala 132:32]
    when _T_13 : @[Decode.scala 133:5]
      io.decode_pc_en_jump <= branch_module.io.br_taken @[Decode.scala 134:33]
      skip @[Decode.scala 133:5]
    node _T_14 = bits(cu_module.io.ins, 6, 0) @[Decode.scala 137:26]
    node _T_15 = eq(_T_14, UInt<6>("h037")) @[Decode.scala 137:32]
    when _T_15 : @[Decode.scala 138:5]
      register_module.io.wdata <= cu_module.io.immediate @[Decode.scala 140:34]
      skip @[Decode.scala 138:5]
    else : @[Decode.scala 142:5]
      node _T_16 = bits(cu_module.io.ins, 6, 0) @[Decode.scala 141:32]
      node _T_17 = eq(_T_16, UInt<5>("h017")) @[Decode.scala 141:38]
      when _T_17 : @[Decode.scala 142:5]
        node _io_decode_alu_in_A_T = asUInt(io.decode_pc_out) @[Decode.scala 143:50]
        io.decode_alu_in_A <= _io_decode_alu_in_A_T @[Decode.scala 143:28]
        io.decode_alu_in_B <= cu_module.io.immediate @[Decode.scala 144:28]
        register_module.io.wdata <= io.decode_alu_out @[Decode.scala 145:34]
        skip @[Decode.scala 142:5]
      else : @[Decode.scala 147:5]
        when branch_module.io.br_ins : @[Decode.scala 147:5]
          io.decode_pc_en_jump <= branch_module.io.br_taken @[Decode.scala 148:30]
          node _io_decode_alu_in_A_T_1 = asUInt(io.decode_pc_out) @[Decode.scala 154:50]
          io.decode_alu_in_A <= _io_decode_alu_in_A_T_1 @[Decode.scala 154:28]
          io.decode_alu_in_B <= cu_module.io.immediate @[Decode.scala 155:28]
          io.decode_alu_Op <= UInt<1>("h00") @[Decode.scala 156:28]
          node _io_decode_pc_br_imm_T = asSInt(io.decode_alu_out) @[Decode.scala 157:52]
          io.decode_pc_br_imm <= _io_decode_pc_br_imm_T @[Decode.scala 157:29]
          skip @[Decode.scala 147:5]
        else : @[Decode.scala 160:5]
          node _T_18 = bits(cu_module.io.ins, 6, 0) @[Decode.scala 159:32]
          node _T_19 = eq(_T_18, UInt<7>("h06f")) @[Decode.scala 159:38]
          when _T_19 : @[Decode.scala 160:5]
            node _io_decode_alu_in_A_T_2 = asUInt(io.decode_pc_out) @[Decode.scala 161:50]
            io.decode_alu_in_A <= _io_decode_alu_in_A_T_2 @[Decode.scala 161:28]
            io.decode_alu_in_B <= cu_module.io.immediate @[Decode.scala 162:28]
            io.decode_alu_Op <= UInt<1>("h00") @[Decode.scala 163:28]
            node _io_decode_pc_br_imm_T_1 = asSInt(io.decode_alu_out) @[Decode.scala 164:54]
            io.decode_pc_br_imm <= _io_decode_pc_br_imm_T_1 @[Decode.scala 164:31]
            node _register_module_io_wdata_T = asUInt(io.decode_pc_out) @[Decode.scala 167:56]
            node _register_module_io_wdata_T_1 = add(_register_module_io_wdata_T, UInt<3>("h04")) @[Decode.scala 167:63]
            node _register_module_io_wdata_T_2 = tail(_register_module_io_wdata_T_1, 1) @[Decode.scala 167:63]
            register_module.io.wdata <= _register_module_io_wdata_T_2 @[Decode.scala 167:34]
            skip @[Decode.scala 160:5]
          else : @[Decode.scala 169:5]
            node _T_20 = bits(cu_module.io.ins, 6, 0) @[Decode.scala 168:32]
            node _T_21 = eq(_T_20, UInt<7>("h067")) @[Decode.scala 168:38]
            when _T_21 : @[Decode.scala 169:5]
              io.decode_alu_Op <= UInt<1>("h00") @[Decode.scala 170:28]
              io.decode_alu_in_A <= register_module.io.rdata1 @[Decode.scala 171:28]
              io.decode_alu_in_B <= cu_module.io.immediate @[Decode.scala 172:28]
              node _io_decode_pc_br_imm_T_2 = asSInt(io.decode_alu_out) @[Decode.scala 173:52]
              io.decode_pc_br_imm <= _io_decode_pc_br_imm_T_2 @[Decode.scala 173:29]
              io.decode_pc_en_jalr <= cu_module.io.jalr_en @[Decode.scala 175:30]
              io.decode_alu_Op <= UInt<1>("h00") @[Decode.scala 178:28]
              register_module.io.wdata <= io.decode_alu_out @[Decode.scala 180:34]
              skip @[Decode.scala 169:5]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_A : UInt<32>, flip in_B : UInt<32>, flip alu_Op : UInt<4>, out : UInt<32>, sum : UInt<32>}
    
    node _sum_T = bits(io.alu_Op, 3, 3) @[ALU.scala 47:42]
    node _sum_T_1 = sub(UInt<1>("h00"), io.in_B) @[ALU.scala 47:49]
    node _sum_T_2 = tail(_sum_T_1, 1) @[ALU.scala 47:49]
    node _sum_T_3 = mux(_sum_T, _sum_T_2, io.in_B) @[ALU.scala 47:30]
    node _sum_T_4 = add(io.in_A, _sum_T_3) @[ALU.scala 47:25]
    node sum = tail(_sum_T_4, 1) @[ALU.scala 47:25]
    node _cmp_T = bits(io.in_A, 31, 31) @[ALU.scala 49:28]
    node _cmp_T_1 = bits(io.in_B, 31, 31) @[ALU.scala 49:51]
    node _cmp_T_2 = eq(_cmp_T, _cmp_T_1) @[ALU.scala 49:39]
    node _cmp_T_3 = bits(sum, 31, 31) @[ALU.scala 49:68]
    node _cmp_T_4 = bits(io.alu_Op, 1, 1) @[ALU.scala 50:22]
    node _cmp_T_5 = bits(io.in_B, 31, 31) @[ALU.scala 50:36]
    node _cmp_T_6 = bits(io.in_A, 31, 31) @[ALU.scala 50:59]
    node _cmp_T_7 = mux(_cmp_T_4, _cmp_T_5, _cmp_T_6) @[ALU.scala 50:8]
    node cmp = mux(_cmp_T_2, _cmp_T_3, _cmp_T_7) @[ALU.scala 49:18]
    node shamt = bits(io.in_B, 4, 0) @[ALU.scala 52:25]
    node _shin_T = bits(io.alu_Op, 3, 3) @[ALU.scala 55:33]
    node _shin_T_1 = eq(io.alu_Op, UInt<3>("h05")) @[ALU.scala 55:50]
    node _shin_T_2 = or(_shin_T, _shin_T_1) @[ALU.scala 55:37]
    node _shin_T_3 = shl(UInt<16>("h0ffff"), 16) @[Bitwise.scala 102:47]
    node _shin_T_4 = xor(UInt<32>("h0ffffffff"), _shin_T_3) @[Bitwise.scala 102:21]
    node _shin_T_5 = shr(io.in_A, 16) @[Bitwise.scala 103:21]
    node _shin_T_6 = and(_shin_T_5, _shin_T_4) @[Bitwise.scala 103:31]
    node _shin_T_7 = bits(io.in_A, 15, 0) @[Bitwise.scala 103:46]
    node _shin_T_8 = shl(_shin_T_7, 16) @[Bitwise.scala 103:65]
    node _shin_T_9 = not(_shin_T_4) @[Bitwise.scala 103:77]
    node _shin_T_10 = and(_shin_T_8, _shin_T_9) @[Bitwise.scala 103:75]
    node _shin_T_11 = or(_shin_T_6, _shin_T_10) @[Bitwise.scala 103:39]
    node _shin_T_12 = bits(_shin_T_4, 23, 0) @[Bitwise.scala 102:28]
    node _shin_T_13 = shl(_shin_T_12, 8) @[Bitwise.scala 102:47]
    node _shin_T_14 = xor(_shin_T_4, _shin_T_13) @[Bitwise.scala 102:21]
    node _shin_T_15 = shr(_shin_T_11, 8) @[Bitwise.scala 103:21]
    node _shin_T_16 = and(_shin_T_15, _shin_T_14) @[Bitwise.scala 103:31]
    node _shin_T_17 = bits(_shin_T_11, 23, 0) @[Bitwise.scala 103:46]
    node _shin_T_18 = shl(_shin_T_17, 8) @[Bitwise.scala 103:65]
    node _shin_T_19 = not(_shin_T_14) @[Bitwise.scala 103:77]
    node _shin_T_20 = and(_shin_T_18, _shin_T_19) @[Bitwise.scala 103:75]
    node _shin_T_21 = or(_shin_T_16, _shin_T_20) @[Bitwise.scala 103:39]
    node _shin_T_22 = bits(_shin_T_14, 27, 0) @[Bitwise.scala 102:28]
    node _shin_T_23 = shl(_shin_T_22, 4) @[Bitwise.scala 102:47]
    node _shin_T_24 = xor(_shin_T_14, _shin_T_23) @[Bitwise.scala 102:21]
    node _shin_T_25 = shr(_shin_T_21, 4) @[Bitwise.scala 103:21]
    node _shin_T_26 = and(_shin_T_25, _shin_T_24) @[Bitwise.scala 103:31]
    node _shin_T_27 = bits(_shin_T_21, 27, 0) @[Bitwise.scala 103:46]
    node _shin_T_28 = shl(_shin_T_27, 4) @[Bitwise.scala 103:65]
    node _shin_T_29 = not(_shin_T_24) @[Bitwise.scala 103:77]
    node _shin_T_30 = and(_shin_T_28, _shin_T_29) @[Bitwise.scala 103:75]
    node _shin_T_31 = or(_shin_T_26, _shin_T_30) @[Bitwise.scala 103:39]
    node _shin_T_32 = bits(_shin_T_24, 29, 0) @[Bitwise.scala 102:28]
    node _shin_T_33 = shl(_shin_T_32, 2) @[Bitwise.scala 102:47]
    node _shin_T_34 = xor(_shin_T_24, _shin_T_33) @[Bitwise.scala 102:21]
    node _shin_T_35 = shr(_shin_T_31, 2) @[Bitwise.scala 103:21]
    node _shin_T_36 = and(_shin_T_35, _shin_T_34) @[Bitwise.scala 103:31]
    node _shin_T_37 = bits(_shin_T_31, 29, 0) @[Bitwise.scala 103:46]
    node _shin_T_38 = shl(_shin_T_37, 2) @[Bitwise.scala 103:65]
    node _shin_T_39 = not(_shin_T_34) @[Bitwise.scala 103:77]
    node _shin_T_40 = and(_shin_T_38, _shin_T_39) @[Bitwise.scala 103:75]
    node _shin_T_41 = or(_shin_T_36, _shin_T_40) @[Bitwise.scala 103:39]
    node _shin_T_42 = bits(_shin_T_34, 30, 0) @[Bitwise.scala 102:28]
    node _shin_T_43 = shl(_shin_T_42, 1) @[Bitwise.scala 102:47]
    node _shin_T_44 = xor(_shin_T_34, _shin_T_43) @[Bitwise.scala 102:21]
    node _shin_T_45 = shr(_shin_T_41, 1) @[Bitwise.scala 103:21]
    node _shin_T_46 = and(_shin_T_45, _shin_T_44) @[Bitwise.scala 103:31]
    node _shin_T_47 = bits(_shin_T_41, 30, 0) @[Bitwise.scala 103:46]
    node _shin_T_48 = shl(_shin_T_47, 1) @[Bitwise.scala 103:65]
    node _shin_T_49 = not(_shin_T_44) @[Bitwise.scala 103:77]
    node _shin_T_50 = and(_shin_T_48, _shin_T_49) @[Bitwise.scala 103:75]
    node _shin_T_51 = or(_shin_T_46, _shin_T_50) @[Bitwise.scala 103:39]
    node shin = mux(_shin_T_2, io.in_A, _shin_T_51) @[ALU.scala 55:19]
    node _shiftr_T = bits(io.alu_Op, 0, 0) @[ALU.scala 57:36]
    node _shiftr_T_1 = bits(shin, 31, 31) @[ALU.scala 57:48]
    node shiftr_hi = and(_shiftr_T, _shiftr_T_1) @[ALU.scala 57:40]
    node _shiftr_T_2 = cat(shiftr_hi, shin) @[Cat.scala 30:58]
    node _shiftr_T_3 = asSInt(_shiftr_T_2) @[ALU.scala 57:69]
    node _shiftr_T_4 = dshr(_shiftr_T_3, shamt) @[ALU.scala 57:76]
    node shiftr = bits(_shiftr_T_4, 31, 0) @[ALU.scala 57:87]
    node _shiftl_T = shl(UInt<16>("h0ffff"), 16) @[Bitwise.scala 102:47]
    node _shiftl_T_1 = xor(UInt<32>("h0ffffffff"), _shiftl_T) @[Bitwise.scala 102:21]
    node _shiftl_T_2 = shr(shiftr, 16) @[Bitwise.scala 103:21]
    node _shiftl_T_3 = and(_shiftl_T_2, _shiftl_T_1) @[Bitwise.scala 103:31]
    node _shiftl_T_4 = bits(shiftr, 15, 0) @[Bitwise.scala 103:46]
    node _shiftl_T_5 = shl(_shiftl_T_4, 16) @[Bitwise.scala 103:65]
    node _shiftl_T_6 = not(_shiftl_T_1) @[Bitwise.scala 103:77]
    node _shiftl_T_7 = and(_shiftl_T_5, _shiftl_T_6) @[Bitwise.scala 103:75]
    node _shiftl_T_8 = or(_shiftl_T_3, _shiftl_T_7) @[Bitwise.scala 103:39]
    node _shiftl_T_9 = bits(_shiftl_T_1, 23, 0) @[Bitwise.scala 102:28]
    node _shiftl_T_10 = shl(_shiftl_T_9, 8) @[Bitwise.scala 102:47]
    node _shiftl_T_11 = xor(_shiftl_T_1, _shiftl_T_10) @[Bitwise.scala 102:21]
    node _shiftl_T_12 = shr(_shiftl_T_8, 8) @[Bitwise.scala 103:21]
    node _shiftl_T_13 = and(_shiftl_T_12, _shiftl_T_11) @[Bitwise.scala 103:31]
    node _shiftl_T_14 = bits(_shiftl_T_8, 23, 0) @[Bitwise.scala 103:46]
    node _shiftl_T_15 = shl(_shiftl_T_14, 8) @[Bitwise.scala 103:65]
    node _shiftl_T_16 = not(_shiftl_T_11) @[Bitwise.scala 103:77]
    node _shiftl_T_17 = and(_shiftl_T_15, _shiftl_T_16) @[Bitwise.scala 103:75]
    node _shiftl_T_18 = or(_shiftl_T_13, _shiftl_T_17) @[Bitwise.scala 103:39]
    node _shiftl_T_19 = bits(_shiftl_T_11, 27, 0) @[Bitwise.scala 102:28]
    node _shiftl_T_20 = shl(_shiftl_T_19, 4) @[Bitwise.scala 102:47]
    node _shiftl_T_21 = xor(_shiftl_T_11, _shiftl_T_20) @[Bitwise.scala 102:21]
    node _shiftl_T_22 = shr(_shiftl_T_18, 4) @[Bitwise.scala 103:21]
    node _shiftl_T_23 = and(_shiftl_T_22, _shiftl_T_21) @[Bitwise.scala 103:31]
    node _shiftl_T_24 = bits(_shiftl_T_18, 27, 0) @[Bitwise.scala 103:46]
    node _shiftl_T_25 = shl(_shiftl_T_24, 4) @[Bitwise.scala 103:65]
    node _shiftl_T_26 = not(_shiftl_T_21) @[Bitwise.scala 103:77]
    node _shiftl_T_27 = and(_shiftl_T_25, _shiftl_T_26) @[Bitwise.scala 103:75]
    node _shiftl_T_28 = or(_shiftl_T_23, _shiftl_T_27) @[Bitwise.scala 103:39]
    node _shiftl_T_29 = bits(_shiftl_T_21, 29, 0) @[Bitwise.scala 102:28]
    node _shiftl_T_30 = shl(_shiftl_T_29, 2) @[Bitwise.scala 102:47]
    node _shiftl_T_31 = xor(_shiftl_T_21, _shiftl_T_30) @[Bitwise.scala 102:21]
    node _shiftl_T_32 = shr(_shiftl_T_28, 2) @[Bitwise.scala 103:21]
    node _shiftl_T_33 = and(_shiftl_T_32, _shiftl_T_31) @[Bitwise.scala 103:31]
    node _shiftl_T_34 = bits(_shiftl_T_28, 29, 0) @[Bitwise.scala 103:46]
    node _shiftl_T_35 = shl(_shiftl_T_34, 2) @[Bitwise.scala 103:65]
    node _shiftl_T_36 = not(_shiftl_T_31) @[Bitwise.scala 103:77]
    node _shiftl_T_37 = and(_shiftl_T_35, _shiftl_T_36) @[Bitwise.scala 103:75]
    node _shiftl_T_38 = or(_shiftl_T_33, _shiftl_T_37) @[Bitwise.scala 103:39]
    node _shiftl_T_39 = bits(_shiftl_T_31, 30, 0) @[Bitwise.scala 102:28]
    node _shiftl_T_40 = shl(_shiftl_T_39, 1) @[Bitwise.scala 102:47]
    node _shiftl_T_41 = xor(_shiftl_T_31, _shiftl_T_40) @[Bitwise.scala 102:21]
    node _shiftl_T_42 = shr(_shiftl_T_38, 1) @[Bitwise.scala 103:21]
    node _shiftl_T_43 = and(_shiftl_T_42, _shiftl_T_41) @[Bitwise.scala 103:31]
    node _shiftl_T_44 = bits(_shiftl_T_38, 30, 0) @[Bitwise.scala 103:46]
    node _shiftl_T_45 = shl(_shiftl_T_44, 1) @[Bitwise.scala 103:65]
    node _shiftl_T_46 = not(_shiftl_T_41) @[Bitwise.scala 103:77]
    node _shiftl_T_47 = and(_shiftl_T_45, _shiftl_T_46) @[Bitwise.scala 103:75]
    node shiftl = or(_shiftl_T_43, _shiftl_T_47) @[Bitwise.scala 103:39]
    io.out <= UInt<1>("h00") @[ALU.scala 63:12]
    io.sum <= UInt<1>("h00") @[ALU.scala 64:12]
    node _T = eq(UInt<4>("h00"), io.alu_Op) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      io.out <= sum @[ALU.scala 69:20]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<4>("h08"), io.alu_Op) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        io.out <= sum @[ALU.scala 74:20]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<4>("h02"), io.alu_Op) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          io.out <= cmp @[ALU.scala 79:20]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<4>("h03"), io.alu_Op) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            io.out <= cmp @[ALU.scala 84:20]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<4>("h0d"), io.alu_Op) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              io.out <= shiftr @[ALU.scala 89:20]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<4>("h05"), io.alu_Op) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                io.out <= shiftr @[ALU.scala 94:20]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_6 = eq(UInt<4>("h01"), io.alu_Op) @[Conditional.scala 37:30]
                when _T_6 : @[Conditional.scala 39:67]
                  io.out <= shiftl @[ALU.scala 99:20]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_7 = eq(UInt<4>("h07"), io.alu_Op) @[Conditional.scala 37:30]
                  when _T_7 : @[Conditional.scala 39:67]
                    node _io_out_T = and(io.in_A, io.in_B) @[ALU.scala 104:32]
                    io.out <= _io_out_T @[ALU.scala 104:20]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_8 = eq(UInt<4>("h06"), io.alu_Op) @[Conditional.scala 37:30]
                    when _T_8 : @[Conditional.scala 39:67]
                      node _io_out_T_1 = or(io.in_A, io.in_B) @[ALU.scala 109:32]
                      io.out <= _io_out_T_1 @[ALU.scala 109:20]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_9 = eq(UInt<4>("h04"), io.alu_Op) @[Conditional.scala 37:30]
                      when _T_9 : @[Conditional.scala 39:67]
                        node _io_out_T_2 = xor(io.in_A, io.in_B) @[ALU.scala 114:32]
                        io.out <= _io_out_T_2 @[ALU.scala 114:20]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_10 = eq(UInt<4>("h0a"), io.alu_Op) @[Conditional.scala 37:30]
                        when _T_10 : @[Conditional.scala 39:67]
                          io.out <= io.in_A @[ALU.scala 119:20]
                          skip @[Conditional.scala 39:67]
                        else : @[Conditional.scala 39:67]
                          node _T_11 = eq(UInt<4>("h0b"), io.alu_Op) @[Conditional.scala 37:30]
                          when _T_11 : @[Conditional.scala 39:67]
                            io.out <= io.in_B @[ALU.scala 124:20]
                            skip @[Conditional.scala 39:67]
    
  module Execute : 
    input clock : Clock
    input reset : Reset
    output io : {flip execute_in_A : UInt<32>, flip execute_in_B : UInt<32>, flip execute_alu_Op : UInt<4>, execute_out : UInt<32>}
    
    inst alu_module of ALU @[Execute.scala 15:28]
    alu_module.clock <= clock
    alu_module.reset <= reset
    alu_module.io.alu_Op <= io.execute_alu_Op @[Execute.scala 18:26]
    alu_module.io.in_A <= io.execute_in_A @[Execute.scala 24:25]
    alu_module.io.in_B <= io.execute_in_B @[Execute.scala 25:25]
    io.execute_out <= alu_module.io.out @[Execute.scala 27:25]
    
  module DMEM : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<10>, flip rd_enable : UInt<1>, flip wr_enable : UInt<1>, flip mask : UInt<1>[4], flip dataIn : UInt<8>[4], dataOut : UInt<8>[4]}
    
    cmem Sync_memory : UInt<8>[4][1024] @[DMEM.scala 21:26]
    when io.wr_enable : @[DMEM.scala 24:27]
      write mport MPORT = Sync_memory[io.addr], clock
      MPORT[0] <= io.dataIn[0]
      MPORT[1] <= io.dataIn[1]
      MPORT[2] <= io.dataIn[2]
      MPORT[3] <= io.dataIn[3]
      skip @[DMEM.scala 24:27]
    read mport MPORT_1 = Sync_memory[io.addr], clock @[DMEM.scala 29:37]
    io.dataOut[0] <= MPORT_1[0] @[DMEM.scala 29:18]
    io.dataOut[1] <= MPORT_1[1] @[DMEM.scala 29:18]
    io.dataOut[2] <= MPORT_1[2] @[DMEM.scala 29:18]
    io.dataOut[3] <= MPORT_1[3] @[DMEM.scala 29:18]
    
  module Memory : 
    input clock : Clock
    input reset : Reset
    output io : {flip mem_mask_addr2 : UInt<2>, flip mem_opcode : UInt<7>, flip mem_datainput : UInt<8>[4], flip mem_rdata1 : UInt<32>, flip mem_rd_enable : UInt<1>, flip mem_dmem_enable : UInt<1>, flip mem_mask_val : UInt<1>[4], flip mem_func3_7 : UInt<4>, flip mem_alu_out : UInt<32>, mem_alu_in_B : UInt<32>, mem_alu_Op : UInt<4>, mem_dataOut : UInt<32>}
    
    inst dmem_module of DMEM @[Memory.scala 31:29]
    dmem_module.clock <= clock
    dmem_module.reset <= reset
    dmem_module.io.rd_enable <= io.mem_rd_enable @[Memory.scala 33:33]
    dmem_module.io.wr_enable <= io.mem_dmem_enable @[Memory.scala 34:33]
    dmem_module.io.mask[0] <= io.mem_mask_val[0] @[Memory.scala 35:33]
    dmem_module.io.mask[1] <= io.mem_mask_val[1] @[Memory.scala 35:33]
    dmem_module.io.mask[2] <= io.mem_mask_val[2] @[Memory.scala 35:33]
    dmem_module.io.mask[3] <= io.mem_mask_val[3] @[Memory.scala 35:33]
    dmem_module.io.dataIn[0] <= UInt<1>("h00") @[Memory.scala 41:30]
    dmem_module.io.dataIn[1] <= UInt<1>("h00") @[Memory.scala 42:30]
    dmem_module.io.dataIn[2] <= UInt<1>("h00") @[Memory.scala 43:30]
    dmem_module.io.dataIn[3] <= UInt<1>("h00") @[Memory.scala 44:30]
    io.mem_dataOut <= UInt<1>("h00") @[Memory.scala 47:22]
    io.mem_alu_Op <= UInt<1>("h00") @[Memory.scala 56:25]
    io.mem_alu_in_B <= UInt<1>("h00") @[Memory.scala 58:25]
    dmem_module.io.addr <= UInt<1>("h00") @[Memory.scala 59:25]
    node _T = eq(io.mem_opcode, UInt<6>("h023")) @[Memory.scala 63:24]
    when _T : @[Memory.scala 64:5]
      io.mem_alu_Op <= UInt<1>("h00") @[Memory.scala 65:23]
      io.mem_alu_in_B <= io.mem_rdata1 @[Memory.scala 67:25]
      node temp_addr = bits(io.mem_alu_out, 11, 2) @[Memory.scala 69:39]
      node _dmem_module_io_addr_T = bits(io.mem_alu_out, 11, 2) @[Memory.scala 73:46]
      dmem_module.io.addr <= _dmem_module_io_addr_T @[Memory.scala 73:29]
      node _T_1 = eq(io.mem_func3_7, UInt<1>("h00")) @[Memory.scala 79:29]
      when _T_1 : @[Memory.scala 80:9]
        dmem_module.io.dataIn[0] <= io.mem_datainput[0] @[Memory.scala 106:38]
        dmem_module.io.dataIn[1] <= io.mem_datainput[0] @[Memory.scala 107:38]
        dmem_module.io.dataIn[2] <= io.mem_datainput[0] @[Memory.scala 108:38]
        dmem_module.io.dataIn[3] <= io.mem_datainput[0] @[Memory.scala 109:38]
        skip @[Memory.scala 80:9]
      else : @[Memory.scala 114:9]
        node _T_2 = eq(io.mem_func3_7, UInt<1>("h01")) @[Memory.scala 113:35]
        when _T_2 : @[Memory.scala 114:9]
          node _T_3 = eq(io.mem_mask_addr2, UInt<1>("h00")) @[Memory.scala 115:36]
          when _T_3 : @[Memory.scala 116:13]
            dmem_module.io.dataIn[0] <= io.mem_datainput[0] @[Memory.scala 119:42]
            dmem_module.io.dataIn[1] <= io.mem_datainput[1] @[Memory.scala 120:42]
            skip @[Memory.scala 116:13]
          else : @[Memory.scala 125:13]
            node _T_4 = eq(io.mem_mask_addr2, UInt<1>("h01")) @[Memory.scala 124:42]
            when _T_4 : @[Memory.scala 125:13]
              dmem_module.io.dataIn[1] <= io.mem_datainput[1] @[Memory.scala 128:42]
              dmem_module.io.dataIn[2] <= io.mem_datainput[2] @[Memory.scala 129:42]
              skip @[Memory.scala 125:13]
            else : @[Memory.scala 132:13]
              node _T_5 = eq(io.mem_mask_addr2, UInt<2>("h02")) @[Memory.scala 131:42]
              when _T_5 : @[Memory.scala 132:13]
                dmem_module.io.dataIn[2] <= io.mem_datainput[2] @[Memory.scala 135:42]
                dmem_module.io.dataIn[3] <= io.mem_datainput[3] @[Memory.scala 136:42]
                skip @[Memory.scala 132:13]
              else : @[Memory.scala 140:13]
                node _T_6 = eq(io.mem_mask_addr2, UInt<2>("h03")) @[Memory.scala 139:42]
                when _T_6 : @[Memory.scala 140:13]
                  dmem_module.io.dataIn[3] <= io.mem_datainput[3] @[Memory.scala 143:42]
                  node _dmem_module_io_addr_T_1 = add(temp_addr, UInt<1>("h01")) @[Memory.scala 144:50]
                  node _dmem_module_io_addr_T_2 = tail(_dmem_module_io_addr_T_1, 1) @[Memory.scala 144:50]
                  dmem_module.io.addr <= _dmem_module_io_addr_T_2 @[Memory.scala 144:37]
                  dmem_module.io.dataIn[0] <= io.mem_datainput[0] @[Memory.scala 145:42]
                  skip @[Memory.scala 140:13]
          skip @[Memory.scala 114:9]
        else : @[Memory.scala 154:9]
          node _T_7 = eq(io.mem_func3_7, UInt<2>("h02")) @[Memory.scala 153:35]
          when _T_7 : @[Memory.scala 154:9]
            node _T_8 = eq(io.mem_mask_addr2, UInt<1>("h00")) @[Memory.scala 155:36]
            when _T_8 : @[Memory.scala 156:13]
              dmem_module.io.dataIn[0] <= io.mem_datainput[0] @[Memory.scala 159:42]
              dmem_module.io.dataIn[1] <= io.mem_datainput[1] @[Memory.scala 160:42]
              dmem_module.io.dataIn[2] <= io.mem_datainput[2] @[Memory.scala 161:42]
              dmem_module.io.dataIn[3] <= io.mem_datainput[3] @[Memory.scala 162:42]
              skip @[Memory.scala 156:13]
            else : @[Memory.scala 166:50]
              node _T_9 = eq(io.mem_mask_addr2, UInt<1>("h01")) @[Memory.scala 166:42]
              when _T_9 : @[Memory.scala 166:50]
                dmem_module.io.dataIn[1] <= io.mem_datainput[1] @[Memory.scala 169:42]
                dmem_module.io.dataIn[2] <= io.mem_datainput[2] @[Memory.scala 170:42]
                dmem_module.io.dataIn[3] <= io.mem_datainput[3] @[Memory.scala 171:42]
                node _dmem_module_io_addr_T_3 = add(temp_addr, UInt<1>("h01")) @[Memory.scala 172:50]
                node _dmem_module_io_addr_T_4 = tail(_dmem_module_io_addr_T_3, 1) @[Memory.scala 172:50]
                dmem_module.io.addr <= _dmem_module_io_addr_T_4 @[Memory.scala 172:37]
                dmem_module.io.dataIn[0] <= io.mem_datainput[0] @[Memory.scala 173:42]
                skip @[Memory.scala 166:50]
              else : @[Memory.scala 179:50]
                node _T_10 = eq(io.mem_mask_addr2, UInt<2>("h02")) @[Memory.scala 179:42]
                when _T_10 : @[Memory.scala 179:50]
                  dmem_module.io.dataIn[2] <= io.mem_datainput[2] @[Memory.scala 182:42]
                  dmem_module.io.dataIn[3] <= io.mem_datainput[3] @[Memory.scala 183:42]
                  node _dmem_module_io_addr_T_5 = add(temp_addr, UInt<1>("h01")) @[Memory.scala 184:50]
                  node _dmem_module_io_addr_T_6 = tail(_dmem_module_io_addr_T_5, 1) @[Memory.scala 184:50]
                  dmem_module.io.addr <= _dmem_module_io_addr_T_6 @[Memory.scala 184:37]
                  dmem_module.io.dataIn[0] <= io.mem_datainput[0] @[Memory.scala 185:42]
                  dmem_module.io.dataIn[1] <= io.mem_datainput[1] @[Memory.scala 186:42]
                  skip @[Memory.scala 179:50]
                else : @[Memory.scala 192:50]
                  node _T_11 = eq(io.mem_mask_addr2, UInt<2>("h03")) @[Memory.scala 192:42]
                  when _T_11 : @[Memory.scala 192:50]
                    dmem_module.io.dataIn[3] <= io.mem_datainput[3] @[Memory.scala 195:42]
                    node _dmem_module_io_addr_T_7 = add(temp_addr, UInt<1>("h01")) @[Memory.scala 196:50]
                    node _dmem_module_io_addr_T_8 = tail(_dmem_module_io_addr_T_7, 1) @[Memory.scala 196:50]
                    dmem_module.io.addr <= _dmem_module_io_addr_T_8 @[Memory.scala 196:37]
                    dmem_module.io.dataIn[0] <= io.mem_datainput[0] @[Memory.scala 197:42]
                    dmem_module.io.dataIn[1] <= io.mem_datainput[1] @[Memory.scala 198:42]
                    dmem_module.io.dataIn[2] <= io.mem_datainput[2] @[Memory.scala 199:42]
                    skip @[Memory.scala 192:50]
            skip @[Memory.scala 154:9]
      skip @[Memory.scala 64:5]
    node _T_12 = eq(io.mem_opcode, UInt<2>("h03")) @[Memory.scala 227:24]
    when _T_12 : @[Memory.scala 228:5]
      io.mem_alu_Op <= UInt<1>("h00") @[Memory.scala 230:30]
      io.mem_alu_in_B <= io.mem_rdata1 @[Memory.scala 232:30]
      node _dmem_module_io_addr_T_9 = bits(io.mem_alu_out, 11, 2) @[Memory.scala 235:54]
      dmem_module.io.addr <= _dmem_module_io_addr_T_9 @[Memory.scala 235:37]
      node next_address = bits(io.mem_alu_out, 11, 2) @[Memory.scala 236:47]
      node _T_13 = eq(io.mem_func3_7, UInt<1>("h00")) @[Memory.scala 239:29]
      when _T_13 : @[Memory.scala 240:9]
        node _T_14 = eq(io.mem_mask_addr2, UInt<1>("h00")) @[Memory.scala 242:36]
        when _T_14 : @[Memory.scala 243:13]
          node lb_num = asSInt(dmem_module.io.dataOut[0]) @[Memory.scala 245:63]
          node _io_mem_dataOut_T = bits(lb_num, 7, 7) @[Memory.scala 246:55]
          node _io_mem_dataOut_T_1 = bits(_io_mem_dataOut_T, 0, 0) @[Bitwise.scala 72:15]
          node io_mem_dataOut_hi = mux(_io_mem_dataOut_T_1, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
          node io_mem_dataOut_lo = asUInt(lb_num) @[Cat.scala 30:58]
          node _io_mem_dataOut_T_2 = cat(io_mem_dataOut_hi, io_mem_dataOut_lo) @[Cat.scala 30:58]
          io.mem_dataOut <= _io_mem_dataOut_T_2 @[Memory.scala 246:32]
          skip @[Memory.scala 243:13]
        else : @[Memory.scala 249:13]
          node _T_15 = eq(io.mem_mask_addr2, UInt<1>("h01")) @[Memory.scala 248:42]
          when _T_15 : @[Memory.scala 249:13]
            node lb_num_1 = asSInt(dmem_module.io.dataOut[1]) @[Memory.scala 251:63]
            node _io_mem_dataOut_T_3 = bits(lb_num_1, 7, 7) @[Memory.scala 252:55]
            node _io_mem_dataOut_T_4 = bits(_io_mem_dataOut_T_3, 0, 0) @[Bitwise.scala 72:15]
            node io_mem_dataOut_hi_1 = mux(_io_mem_dataOut_T_4, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
            node io_mem_dataOut_lo_1 = asUInt(lb_num_1) @[Cat.scala 30:58]
            node _io_mem_dataOut_T_5 = cat(io_mem_dataOut_hi_1, io_mem_dataOut_lo_1) @[Cat.scala 30:58]
            io.mem_dataOut <= _io_mem_dataOut_T_5 @[Memory.scala 252:32]
            skip @[Memory.scala 249:13]
          else : @[Memory.scala 255:13]
            node _T_16 = eq(io.mem_mask_addr2, UInt<2>("h02")) @[Memory.scala 254:42]
            when _T_16 : @[Memory.scala 255:13]
              node lb_num_2 = asSInt(dmem_module.io.dataOut[2]) @[Memory.scala 257:63]
              node _io_mem_dataOut_T_6 = bits(lb_num_2, 7, 7) @[Memory.scala 258:55]
              node _io_mem_dataOut_T_7 = bits(_io_mem_dataOut_T_6, 0, 0) @[Bitwise.scala 72:15]
              node io_mem_dataOut_hi_2 = mux(_io_mem_dataOut_T_7, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
              node io_mem_dataOut_lo_2 = asUInt(lb_num_2) @[Cat.scala 30:58]
              node _io_mem_dataOut_T_8 = cat(io_mem_dataOut_hi_2, io_mem_dataOut_lo_2) @[Cat.scala 30:58]
              io.mem_dataOut <= _io_mem_dataOut_T_8 @[Memory.scala 258:32]
              skip @[Memory.scala 255:13]
            else : @[Memory.scala 261:13]
              node _T_17 = eq(io.mem_mask_addr2, UInt<2>("h03")) @[Memory.scala 260:42]
              when _T_17 : @[Memory.scala 261:13]
                node lb_num_3 = asSInt(dmem_module.io.dataOut[3]) @[Memory.scala 263:63]
                node _io_mem_dataOut_T_9 = bits(lb_num_3, 7, 7) @[Memory.scala 264:55]
                node _io_mem_dataOut_T_10 = bits(_io_mem_dataOut_T_9, 0, 0) @[Bitwise.scala 72:15]
                node io_mem_dataOut_hi_3 = mux(_io_mem_dataOut_T_10, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                node io_mem_dataOut_lo_3 = asUInt(lb_num_3) @[Cat.scala 30:58]
                node _io_mem_dataOut_T_11 = cat(io_mem_dataOut_hi_3, io_mem_dataOut_lo_3) @[Cat.scala 30:58]
                io.mem_dataOut <= _io_mem_dataOut_T_11 @[Memory.scala 264:32]
                skip @[Memory.scala 261:13]
        skip @[Memory.scala 240:9]
      else : @[Memory.scala 270:9]
        node _T_18 = eq(io.mem_func3_7, UInt<1>("h01")) @[Memory.scala 269:34]
        when _T_18 : @[Memory.scala 270:9]
          node _T_19 = eq(io.mem_mask_addr2, UInt<1>("h00")) @[Memory.scala 273:36]
          when _T_19 : @[Memory.scala 274:13]
            node _lh_num_T = cat(dmem_module.io.dataOut[1], dmem_module.io.dataOut[0]) @[Cat.scala 30:58]
            node lh_num = asSInt(_lh_num_T) @[Memory.scala 275:94]
            node _io_mem_dataOut_T_12 = bits(lh_num, 15, 15) @[Memory.scala 277:55]
            node _io_mem_dataOut_T_13 = bits(_io_mem_dataOut_T_12, 0, 0) @[Bitwise.scala 72:15]
            node io_mem_dataOut_hi_4 = mux(_io_mem_dataOut_T_13, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
            node io_mem_dataOut_lo_4 = asUInt(lh_num) @[Cat.scala 30:58]
            node _io_mem_dataOut_T_14 = cat(io_mem_dataOut_hi_4, io_mem_dataOut_lo_4) @[Cat.scala 30:58]
            io.mem_dataOut <= _io_mem_dataOut_T_14 @[Memory.scala 277:32]
            skip @[Memory.scala 274:13]
          else : @[Memory.scala 280:13]
            node _T_20 = eq(io.mem_mask_addr2, UInt<1>("h01")) @[Memory.scala 279:42]
            when _T_20 : @[Memory.scala 280:13]
              node _lh_num_T_1 = cat(dmem_module.io.dataOut[2], dmem_module.io.dataOut[1]) @[Cat.scala 30:58]
              node lh_num_1 = asSInt(_lh_num_T_1) @[Memory.scala 281:94]
              node _io_mem_dataOut_T_15 = bits(lh_num_1, 15, 15) @[Memory.scala 283:55]
              node _io_mem_dataOut_T_16 = bits(_io_mem_dataOut_T_15, 0, 0) @[Bitwise.scala 72:15]
              node io_mem_dataOut_hi_5 = mux(_io_mem_dataOut_T_16, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
              node io_mem_dataOut_lo_5 = asUInt(lh_num_1) @[Cat.scala 30:58]
              node _io_mem_dataOut_T_17 = cat(io_mem_dataOut_hi_5, io_mem_dataOut_lo_5) @[Cat.scala 30:58]
              io.mem_dataOut <= _io_mem_dataOut_T_17 @[Memory.scala 283:32]
              skip @[Memory.scala 280:13]
            else : @[Memory.scala 286:13]
              node _T_21 = eq(io.mem_mask_addr2, UInt<2>("h02")) @[Memory.scala 285:42]
              when _T_21 : @[Memory.scala 286:13]
                node _lh_num_T_2 = cat(dmem_module.io.dataOut[3], dmem_module.io.dataOut[2]) @[Cat.scala 30:58]
                node lh_num_2 = asSInt(_lh_num_T_2) @[Memory.scala 287:94]
                node _io_mem_dataOut_T_18 = bits(lh_num_2, 15, 15) @[Memory.scala 289:55]
                node _io_mem_dataOut_T_19 = bits(_io_mem_dataOut_T_18, 0, 0) @[Bitwise.scala 72:15]
                node io_mem_dataOut_hi_6 = mux(_io_mem_dataOut_T_19, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                node io_mem_dataOut_lo_6 = asUInt(lh_num_2) @[Cat.scala 30:58]
                node _io_mem_dataOut_T_20 = cat(io_mem_dataOut_hi_6, io_mem_dataOut_lo_6) @[Cat.scala 30:58]
                io.mem_dataOut <= _io_mem_dataOut_T_20 @[Memory.scala 289:32]
                skip @[Memory.scala 286:13]
              else : @[Memory.scala 292:13]
                node _T_22 = eq(io.mem_mask_addr2, UInt<2>("h03")) @[Memory.scala 291:42]
                when _T_22 : @[Memory.scala 292:13]
                  node _dmem_module_io_addr_T_10 = add(next_address, UInt<1>("h01")) @[Memory.scala 294:53]
                  node _dmem_module_io_addr_T_11 = tail(_dmem_module_io_addr_T_10, 1) @[Memory.scala 294:53]
                  dmem_module.io.addr <= _dmem_module_io_addr_T_11 @[Memory.scala 294:37]
                  node _lh_num2_T = cat(dmem_module.io.dataOut[0], dmem_module.io.dataOut[3]) @[Cat.scala 30:58]
                  node lh_num2 = asSInt(_lh_num2_T) @[Memory.scala 295:80]
                  node _io_mem_dataOut_T_21 = bits(lh_num2, 15, 15) @[Memory.scala 296:62]
                  node _io_mem_dataOut_T_22 = bits(_io_mem_dataOut_T_21, 0, 0) @[Bitwise.scala 72:15]
                  node io_mem_dataOut_hi_7 = mux(_io_mem_dataOut_T_22, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                  node io_mem_dataOut_lo_7 = asUInt(lh_num2) @[Cat.scala 30:58]
                  node _io_mem_dataOut_T_23 = cat(io_mem_dataOut_hi_7, io_mem_dataOut_lo_7) @[Cat.scala 30:58]
                  io.mem_dataOut <= _io_mem_dataOut_T_23 @[Memory.scala 296:38]
                  skip @[Memory.scala 292:13]
          skip @[Memory.scala 270:9]
        else : @[Memory.scala 306:9]
          node _T_23 = eq(io.mem_func3_7, UInt<2>("h02")) @[Memory.scala 305:34]
          when _T_23 : @[Memory.scala 306:9]
            node _T_24 = eq(io.mem_mask_addr2, UInt<1>("h00")) @[Memory.scala 309:36]
            when _T_24 : @[Memory.scala 310:13]
              node lw_num_lo = cat(dmem_module.io.dataOut[1], dmem_module.io.dataOut[0]) @[Cat.scala 30:58]
              node lw_num_hi = cat(dmem_module.io.dataOut[3], dmem_module.io.dataOut[2]) @[Cat.scala 30:58]
              node _lw_num_T = cat(lw_num_hi, lw_num_lo) @[Cat.scala 30:58]
              node lw_num = asSInt(_lw_num_T) @[Memory.scala 312:73]
              node _io_mem_dataOut_T_24 = asUInt(lw_num) @[Memory.scala 313:42]
              io.mem_dataOut <= _io_mem_dataOut_T_24 @[Memory.scala 313:32]
              skip @[Memory.scala 310:13]
            else : @[Memory.scala 317:13]
              node _T_25 = eq(io.mem_mask_addr2, UInt<1>("h01")) @[Memory.scala 316:42]
              when _T_25 : @[Memory.scala 317:13]
                node lw_num_hi_1 = cat(dmem_module.io.dataOut[2], dmem_module.io.dataOut[1]) @[Cat.scala 30:58]
                node io_mem_dataOut_lo_8 = cat(lw_num_hi_1, dmem_module.io.dataOut[0]) @[Cat.scala 30:58]
                node _dmem_module_io_addr_T_12 = add(next_address, UInt<1>("h01")) @[Memory.scala 319:53]
                node _dmem_module_io_addr_T_13 = tail(_dmem_module_io_addr_T_12, 1) @[Memory.scala 319:53]
                dmem_module.io.addr <= _dmem_module_io_addr_T_13 @[Memory.scala 319:37]
                node _io_mem_dataOut_T_25 = cat(dmem_module.io.dataOut[3], io_mem_dataOut_lo_8) @[Cat.scala 30:58]
                io.mem_dataOut <= _io_mem_dataOut_T_25 @[Memory.scala 320:38]
                skip @[Memory.scala 317:13]
              else : @[Memory.scala 327:13]
                node _T_26 = eq(io.mem_mask_addr2, UInt<2>("h02")) @[Memory.scala 326:42]
                when _T_26 : @[Memory.scala 327:13]
                  node io_mem_dataOut_lo_9 = cat(dmem_module.io.dataOut[1], dmem_module.io.dataOut[0]) @[Cat.scala 30:58]
                  node _dmem_module_io_addr_T_14 = add(next_address, UInt<1>("h01")) @[Memory.scala 329:53]
                  node _dmem_module_io_addr_T_15 = tail(_dmem_module_io_addr_T_14, 1) @[Memory.scala 329:53]
                  dmem_module.io.addr <= _dmem_module_io_addr_T_15 @[Memory.scala 329:37]
                  node io_mem_dataOut_hi_8 = cat(dmem_module.io.dataOut[3], dmem_module.io.dataOut[2]) @[Cat.scala 30:58]
                  node _io_mem_dataOut_T_26 = cat(io_mem_dataOut_hi_8, io_mem_dataOut_lo_9) @[Cat.scala 30:58]
                  io.mem_dataOut <= _io_mem_dataOut_T_26 @[Memory.scala 330:38]
                  skip @[Memory.scala 327:13]
                else : @[Memory.scala 336:13]
                  node _T_27 = eq(io.mem_mask_addr2, UInt<2>("h03")) @[Memory.scala 335:42]
                  when _T_27 : @[Memory.scala 336:13]
                    node _dmem_module_io_addr_T_16 = add(next_address, UInt<1>("h01")) @[Memory.scala 338:53]
                    node _dmem_module_io_addr_T_17 = tail(_dmem_module_io_addr_T_16, 1) @[Memory.scala 338:53]
                    dmem_module.io.addr <= _dmem_module_io_addr_T_17 @[Memory.scala 338:37]
                    node io_mem_dataOut_lo_10 = cat(dmem_module.io.dataOut[1], dmem_module.io.dataOut[0]) @[Cat.scala 30:58]
                    node io_mem_dataOut_hi_9 = cat(dmem_module.io.dataOut[3], dmem_module.io.dataOut[2]) @[Cat.scala 30:58]
                    node _io_mem_dataOut_T_27 = cat(io_mem_dataOut_hi_9, io_mem_dataOut_lo_10) @[Cat.scala 30:58]
                    io.mem_dataOut <= _io_mem_dataOut_T_27 @[Memory.scala 339:38]
                    skip @[Memory.scala 336:13]
            skip @[Memory.scala 306:9]
          else : @[Memory.scala 349:9]
            node _T_28 = eq(io.mem_func3_7, UInt<3>("h04")) @[Memory.scala 348:34]
            when _T_28 : @[Memory.scala 349:9]
              node _T_29 = eq(io.mem_mask_addr2, UInt<1>("h00")) @[Memory.scala 350:36]
              when _T_29 : @[Memory.scala 351:13]
                node _io_mem_dataOut_T_28 = bits(dmem_module.io.dataOut[0], 7, 7) @[Memory.scala 353:56]
                node _io_mem_dataOut_T_29 = bits(_io_mem_dataOut_T_28, 0, 0) @[Bitwise.scala 72:15]
                node io_mem_dataOut_hi_10 = mux(_io_mem_dataOut_T_29, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                node _io_mem_dataOut_T_30 = cat(io_mem_dataOut_hi_10, dmem_module.io.dataOut[0]) @[Cat.scala 30:58]
                io.mem_dataOut <= _io_mem_dataOut_T_30 @[Memory.scala 353:32]
                skip @[Memory.scala 351:13]
              else : @[Memory.scala 359:13]
                node _T_30 = eq(io.mem_mask_addr2, UInt<1>("h01")) @[Memory.scala 358:42]
                when _T_30 : @[Memory.scala 359:13]
                  node _io_mem_dataOut_T_31 = bits(dmem_module.io.dataOut[1], 7, 7) @[Memory.scala 361:56]
                  node _io_mem_dataOut_T_32 = bits(_io_mem_dataOut_T_31, 0, 0) @[Bitwise.scala 72:15]
                  node io_mem_dataOut_hi_11 = mux(_io_mem_dataOut_T_32, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                  node _io_mem_dataOut_T_33 = cat(io_mem_dataOut_hi_11, dmem_module.io.dataOut[1]) @[Cat.scala 30:58]
                  io.mem_dataOut <= _io_mem_dataOut_T_33 @[Memory.scala 361:32]
                  skip @[Memory.scala 359:13]
                else : @[Memory.scala 367:13]
                  node _T_31 = eq(io.mem_mask_addr2, UInt<2>("h02")) @[Memory.scala 366:42]
                  when _T_31 : @[Memory.scala 367:13]
                    node _io_mem_dataOut_T_34 = bits(dmem_module.io.dataOut[2], 7, 7) @[Memory.scala 369:56]
                    node _io_mem_dataOut_T_35 = bits(_io_mem_dataOut_T_34, 0, 0) @[Bitwise.scala 72:15]
                    node io_mem_dataOut_hi_12 = mux(_io_mem_dataOut_T_35, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                    node _io_mem_dataOut_T_36 = cat(io_mem_dataOut_hi_12, dmem_module.io.dataOut[2]) @[Cat.scala 30:58]
                    io.mem_dataOut <= _io_mem_dataOut_T_36 @[Memory.scala 369:32]
                    skip @[Memory.scala 367:13]
                  else : @[Memory.scala 375:13]
                    node _T_32 = eq(io.mem_mask_addr2, UInt<2>("h03")) @[Memory.scala 374:42]
                    when _T_32 : @[Memory.scala 375:13]
                      node _io_mem_dataOut_T_37 = bits(dmem_module.io.dataOut[3], 7, 7) @[Memory.scala 377:56]
                      node _io_mem_dataOut_T_38 = bits(_io_mem_dataOut_T_37, 0, 0) @[Bitwise.scala 72:15]
                      node io_mem_dataOut_hi_13 = mux(_io_mem_dataOut_T_38, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                      node _io_mem_dataOut_T_39 = cat(io_mem_dataOut_hi_13, dmem_module.io.dataOut[3]) @[Cat.scala 30:58]
                      io.mem_dataOut <= _io_mem_dataOut_T_39 @[Memory.scala 377:32]
                      skip @[Memory.scala 375:13]
              skip @[Memory.scala 349:9]
            else : @[Memory.scala 388:9]
              node _T_33 = eq(io.mem_func3_7, UInt<3>("h05")) @[Memory.scala 387:34]
              when _T_33 : @[Memory.scala 388:9]
                node _T_34 = eq(io.mem_mask_addr2, UInt<1>("h00")) @[Memory.scala 389:36]
                when _T_34 : @[Memory.scala 390:13]
                  node io_mem_dataOut_lo_11 = cat(dmem_module.io.dataOut[1], dmem_module.io.dataOut[0]) @[Cat.scala 30:58]
                  node _io_mem_dataOut_T_40 = bits(io_mem_dataOut_lo_11, 15, 15) @[Memory.scala 392:56]
                  node _io_mem_dataOut_T_41 = bits(_io_mem_dataOut_T_40, 0, 0) @[Bitwise.scala 72:15]
                  node io_mem_dataOut_hi_14 = mux(_io_mem_dataOut_T_41, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                  node _io_mem_dataOut_T_42 = cat(io_mem_dataOut_hi_14, io_mem_dataOut_lo_11) @[Cat.scala 30:58]
                  io.mem_dataOut <= _io_mem_dataOut_T_42 @[Memory.scala 392:32]
                  skip @[Memory.scala 390:13]
                else : @[Memory.scala 398:13]
                  node _T_35 = eq(io.mem_mask_addr2, UInt<1>("h01")) @[Memory.scala 397:42]
                  when _T_35 : @[Memory.scala 398:13]
                    node io_mem_dataOut_lo_12 = cat(dmem_module.io.dataOut[2], dmem_module.io.dataOut[1]) @[Cat.scala 30:58]
                    node _io_mem_dataOut_T_43 = bits(io_mem_dataOut_lo_12, 15, 15) @[Memory.scala 400:56]
                    node _io_mem_dataOut_T_44 = bits(_io_mem_dataOut_T_43, 0, 0) @[Bitwise.scala 72:15]
                    node io_mem_dataOut_hi_15 = mux(_io_mem_dataOut_T_44, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                    node _io_mem_dataOut_T_45 = cat(io_mem_dataOut_hi_15, io_mem_dataOut_lo_12) @[Cat.scala 30:58]
                    io.mem_dataOut <= _io_mem_dataOut_T_45 @[Memory.scala 400:32]
                    skip @[Memory.scala 398:13]
                  else : @[Memory.scala 406:13]
                    node _T_36 = eq(io.mem_mask_addr2, UInt<2>("h02")) @[Memory.scala 405:42]
                    when _T_36 : @[Memory.scala 406:13]
                      node io_mem_dataOut_lo_13 = cat(dmem_module.io.dataOut[3], dmem_module.io.dataOut[2]) @[Cat.scala 30:58]
                      node _io_mem_dataOut_T_46 = bits(io_mem_dataOut_lo_13, 15, 15) @[Memory.scala 408:56]
                      node _io_mem_dataOut_T_47 = bits(_io_mem_dataOut_T_46, 0, 0) @[Bitwise.scala 72:15]
                      node io_mem_dataOut_hi_16 = mux(_io_mem_dataOut_T_47, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                      node _io_mem_dataOut_T_48 = cat(io_mem_dataOut_hi_16, io_mem_dataOut_lo_13) @[Cat.scala 30:58]
                      io.mem_dataOut <= _io_mem_dataOut_T_48 @[Memory.scala 408:32]
                      skip @[Memory.scala 406:13]
                    else : @[Memory.scala 414:13]
                      node _T_37 = eq(io.mem_mask_addr2, UInt<2>("h03")) @[Memory.scala 413:42]
                      when _T_37 : @[Memory.scala 414:13]
                        node _dmem_module_io_addr_T_18 = add(next_address, UInt<1>("h01")) @[Memory.scala 416:53]
                        node _dmem_module_io_addr_T_19 = tail(_dmem_module_io_addr_T_18, 1) @[Memory.scala 416:53]
                        dmem_module.io.addr <= _dmem_module_io_addr_T_19 @[Memory.scala 416:37]
                        node io_mem_dataOut_lo_14 = cat(dmem_module.io.dataOut[0], dmem_module.io.dataOut[3]) @[Cat.scala 30:58]
                        node _io_mem_dataOut_T_49 = bits(io_mem_dataOut_lo_14, 15, 15) @[Memory.scala 418:62]
                        node _io_mem_dataOut_T_50 = bits(_io_mem_dataOut_T_49, 0, 0) @[Bitwise.scala 72:15]
                        node io_mem_dataOut_hi_17 = mux(_io_mem_dataOut_T_50, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                        node _io_mem_dataOut_T_51 = cat(io_mem_dataOut_hi_17, io_mem_dataOut_lo_14) @[Cat.scala 30:58]
                        io.mem_dataOut <= _io_mem_dataOut_T_51 @[Memory.scala 418:38]
                        skip @[Memory.scala 414:13]
                skip @[Memory.scala 388:9]
      skip @[Memory.scala 228:5]
    
  module WriteBack : 
    input clock : Clock
    input reset : Reset
    output io : {flip wb_opcode : UInt<7>, flip wb_dmem_dataOut : UInt<32>, wb_dataOut : UInt<32>}
    
    node _io_wb_dataOut_T = eq(io.wb_opcode, UInt<2>("h03")) @[WriteBack.scala 24:39]
    node _io_wb_dataOut_T_1 = mux(_io_wb_dataOut_T, io.wb_dmem_dataOut, UInt<1>("h00")) @[WriteBack.scala 24:25]
    io.wb_dataOut <= _io_wb_dataOut_T_1 @[WriteBack.scala 24:19]
    
  module CoreTop : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip dataIn : UInt<32>, dataOut : UInt<32>}
    
    inst fetch_module of Fetch @[CoreTop.scala 43:37]
    fetch_module.clock <= clock
    fetch_module.reset <= reset
    inst decode_module of Decode @[CoreTop.scala 44:37]
    decode_module.clock <= clock
    decode_module.reset <= reset
    inst execute_module of Execute @[CoreTop.scala 45:37]
    execute_module.clock <= clock
    execute_module.reset <= reset
    inst memory_module of Memory @[CoreTop.scala 46:37]
    memory_module.clock <= clock
    memory_module.reset <= reset
    inst wb_module of WriteBack @[CoreTop.scala 47:37]
    wb_module.clock <= clock
    wb_module.reset <= reset
    fetch_module.io.fetch_wen <= decode_module.io.decode_imem_en @[CoreTop.scala 51:35]
    decode_module.io.decode_ins <= fetch_module.io.fetch_dataOut @[CoreTop.scala 57:38]
    fetch_module.io.fetch_pc_br_imm <= decode_module.io.decode_pc_br_imm @[CoreTop.scala 59:38]
    fetch_module.io.fetch_pc_en_jump <= decode_module.io.decode_pc_en_jump @[CoreTop.scala 61:38]
    fetch_module.io.fetch_jalr_en_pc <= decode_module.io.decode_pc_en_jalr @[CoreTop.scala 63:38]
    execute_module.io.execute_in_A <= decode_module.io.decode_rdata1 @[CoreTop.scala 65:41]
    execute_module.io.execute_in_B <= decode_module.io.decode_rdata2 @[CoreTop.scala 66:41]
    execute_module.io.execute_alu_Op <= decode_module.io.decode_func3_7 @[CoreTop.scala 67:41]
    decode_module.io.decode_regfile_wdata <= execute_module.io.execute_out @[CoreTop.scala 70:45]
    decode_module.io.decode_alu_out <= execute_module.io.execute_out @[CoreTop.scala 72:45]
    decode_module.io.decode_pc_out <= fetch_module.io.fetch_pc_out @[CoreTop.scala 74:45]
    node _T = bits(fetch_module.io.fetch_dataOut, 6, 0) @[CoreTop.scala 76:41]
    node _T_1 = eq(_T, UInt<5>("h017")) @[CoreTop.scala 76:47]
    node _T_2 = bits(fetch_module.io.fetch_dataOut, 6, 0) @[CoreTop.scala 77:41]
    node _T_3 = eq(_T_2, UInt<7>("h063")) @[CoreTop.scala 77:47]
    node _T_4 = or(_T_1, _T_3) @[CoreTop.scala 77:9]
    node _T_5 = bits(fetch_module.io.fetch_dataOut, 6, 0) @[CoreTop.scala 79:39]
    node _T_6 = eq(_T_5, UInt<7>("h06f")) @[CoreTop.scala 79:45]
    node _T_7 = bits(fetch_module.io.fetch_dataOut, 6, 0) @[CoreTop.scala 80:41]
    node _T_8 = eq(_T_7, UInt<7>("h067")) @[CoreTop.scala 80:47]
    node _T_9 = or(_T_6, _T_8) @[CoreTop.scala 80:9]
    node _T_10 = or(_T_4, _T_9) @[CoreTop.scala 78:13]
    when _T_10 : @[CoreTop.scala 81:5]
      execute_module.io.execute_in_A <= decode_module.io.decode_alu_in_A @[CoreTop.scala 82:47]
      execute_module.io.execute_in_B <= decode_module.io.decode_alu_in_B @[CoreTop.scala 83:47]
      execute_module.io.execute_alu_Op <= decode_module.io.decode_alu_Op @[CoreTop.scala 84:47]
      decode_module.io.decode_alu_out <= execute_module.io.execute_out @[CoreTop.scala 85:47]
      skip @[CoreTop.scala 81:5]
    node _decode_module_io_decode_dmem_addr2_T = bits(execute_module.io.execute_out, 1, 0) @[CoreTop.scala 89:81]
    decode_module.io.decode_dmem_addr2 <= _decode_module_io_decode_dmem_addr2_T @[CoreTop.scala 89:47]
    node _memory_module_io_mem_opcode_T = bits(fetch_module.io.fetch_dataOut, 6, 0) @[CoreTop.scala 98:73]
    memory_module.io.mem_opcode <= _memory_module_io_mem_opcode_T @[CoreTop.scala 98:41]
    node _memory_module_io_mem_func3_7_T = bits(fetch_module.io.fetch_dataOut, 14, 12) @[CoreTop.scala 99:73]
    memory_module.io.mem_func3_7 <= _memory_module_io_mem_func3_7_T @[CoreTop.scala 99:41]
    memory_module.io.mem_mask_addr2 <= UInt<1>("h00") @[CoreTop.scala 102:41]
    memory_module.io.mem_datainput[0] <= UInt<1>("h00") @[CoreTop.scala 105:44]
    memory_module.io.mem_datainput[1] <= UInt<1>("h00") @[CoreTop.scala 106:44]
    memory_module.io.mem_datainput[2] <= UInt<1>("h00") @[CoreTop.scala 107:44]
    memory_module.io.mem_datainput[3] <= UInt<1>("h00") @[CoreTop.scala 108:44]
    memory_module.io.mem_rdata1 <= UInt<1>("h00") @[CoreTop.scala 110:41]
    memory_module.io.mem_dmem_enable <= decode_module.io.decode_dmem_en @[CoreTop.scala 112:44]
    memory_module.io.mem_rd_enable <= decode_module.io.decode_r_en @[CoreTop.scala 113:44]
    memory_module.io.mem_mask_val[0] <= decode_module.io.decode_mask_val[0] @[CoreTop.scala 114:44]
    memory_module.io.mem_mask_val[1] <= decode_module.io.decode_mask_val[1] @[CoreTop.scala 114:44]
    memory_module.io.mem_mask_val[2] <= decode_module.io.decode_mask_val[2] @[CoreTop.scala 114:44]
    memory_module.io.mem_mask_val[3] <= decode_module.io.decode_mask_val[3] @[CoreTop.scala 114:44]
    memory_module.io.mem_alu_out <= execute_module.io.execute_out @[CoreTop.scala 115:44]
    node _wb_module_io_wb_opcode_T = bits(fetch_module.io.fetch_dataOut, 6, 0) @[CoreTop.scala 128:73]
    wb_module.io.wb_opcode <= _wb_module_io_wb_opcode_T @[CoreTop.scala 128:41]
    wb_module.io.wb_dmem_dataOut <= UInt<1>("h00") @[CoreTop.scala 130:38]
    node _T_11 = bits(fetch_module.io.fetch_dataOut, 6, 0) @[CoreTop.scala 136:39]
    node _T_12 = eq(_T_11, UInt<6>("h023")) @[CoreTop.scala 136:45]
    when _T_12 : @[CoreTop.scala 137:5]
      memory_module.io.mem_rdata1 <= decode_module.io.decode_rdata1 @[CoreTop.scala 140:47]
      execute_module.io.execute_in_A <= decode_module.io.decode_immediate @[CoreTop.scala 145:47]
      execute_module.io.execute_in_B <= memory_module.io.mem_alu_in_B @[CoreTop.scala 146:47]
      execute_module.io.execute_alu_Op <= memory_module.io.mem_alu_Op @[CoreTop.scala 147:47]
      node _memory_module_io_mem_mask_addr2_T = bits(execute_module.io.execute_out, 1, 0) @[CoreTop.scala 148:79]
      memory_module.io.mem_mask_addr2 <= _memory_module_io_mem_mask_addr2_T @[CoreTop.scala 148:47]
      memory_module.io.mem_alu_out <= execute_module.io.execute_out @[CoreTop.scala 149:47]
      node _memory_module_io_mem_datainput_0_T = bits(decode_module.io.decode_rdata2, 7, 0) @[CoreTop.scala 152:83]
      memory_module.io.mem_datainput[0] <= _memory_module_io_mem_datainput_0_T @[CoreTop.scala 152:50]
      node _memory_module_io_mem_datainput_1_T = bits(decode_module.io.decode_rdata2, 15, 8) @[CoreTop.scala 153:83]
      memory_module.io.mem_datainput[1] <= _memory_module_io_mem_datainput_1_T @[CoreTop.scala 153:50]
      node _memory_module_io_mem_datainput_2_T = bits(decode_module.io.decode_rdata2, 23, 16) @[CoreTop.scala 154:83]
      memory_module.io.mem_datainput[2] <= _memory_module_io_mem_datainput_2_T @[CoreTop.scala 154:50]
      node _memory_module_io_mem_datainput_3_T = bits(decode_module.io.decode_rdata2, 31, 24) @[CoreTop.scala 155:83]
      memory_module.io.mem_datainput[3] <= _memory_module_io_mem_datainput_3_T @[CoreTop.scala 155:50]
      skip @[CoreTop.scala 137:5]
    else : @[CoreTop.scala 157:5]
      node _T_13 = bits(fetch_module.io.fetch_dataOut, 6, 0) @[CoreTop.scala 156:45]
      node _T_14 = eq(_T_13, UInt<2>("h03")) @[CoreTop.scala 156:51]
      when _T_14 : @[CoreTop.scala 157:5]
        memory_module.io.mem_rdata1 <= decode_module.io.decode_rdata1 @[CoreTop.scala 164:47]
        execute_module.io.execute_in_A <= decode_module.io.decode_immediate @[CoreTop.scala 165:47]
        execute_module.io.execute_in_B <= memory_module.io.mem_alu_in_B @[CoreTop.scala 166:47]
        execute_module.io.execute_alu_Op <= memory_module.io.mem_alu_Op @[CoreTop.scala 167:47]
        node _memory_module_io_mem_mask_addr2_T_1 = bits(execute_module.io.execute_out, 1, 0) @[CoreTop.scala 168:79]
        memory_module.io.mem_mask_addr2 <= _memory_module_io_mem_mask_addr2_T_1 @[CoreTop.scala 168:47]
        memory_module.io.mem_alu_out <= execute_module.io.execute_out @[CoreTop.scala 169:47]
        wb_module.io.wb_dmem_dataOut <= memory_module.io.mem_dataOut @[CoreTop.scala 171:47]
        decode_module.io.decode_regfile_wdata <= wb_module.io.wb_dataOut @[CoreTop.scala 173:47]
        skip @[CoreTop.scala 157:5]
    io.dataOut <= decode_module.io.decode_regfile_wdata @[CoreTop.scala 176:21]
    
